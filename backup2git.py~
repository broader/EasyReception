"""
A scripts to run git command in order to synchronize local source with 
remote github server.
"""

__version__ = "0.0.1"

import commands, datetime
import logging, os, sys
#import os, os.path

RSYNC = 'rsync'
RSYNCOPTIONS = ( '-avzur', '--delete', '--progress' )
#GIT = 'git --git-dir=/home/broader/develop/EasyReception/.git'
GIT = 'git'
LOGFILE = '%s'%os.path.sep.join((os.path.abspath(os.path.curdir), 'backup2git.log'))
KARRIGELLSRC = '/home/broader/develop/R@K/CMS/Karrigell/ereception/'
LOCALGIT = '/home/broader/develop/EasyReception/develop'

def getLogger(logfile, loggerName=None):
	logger = logging.getLogger (loggerName)
	handler = logging.FileHandler(logfile)
	handler.setFormatter( logging.Formatter('%(asctime)s %(levelname)s %(message)s') )
	logger.addHandler(handler)
	logger.setLevel(logging.DEBUG)
	return logger

def action(cmd, test=True, logger=None):
	#print 'Command: \n%s\n'%cmd
	if test:
		res = [0,'Test']
	else:
		res = commands.getstatusoutput(cmd)	
	
	if logger:
		logger.info('Command: \n%s\nrunning result is :%s'%(cmd,res[1]))
	return res

def run(test):
   logger = getLogger(LOGFILE, "GitHub update" )   
   rsync = RSYNC
   git = GIT  
   
   # delete nousing captcha images
   cmd = ['rm', '-f', ''.join((KARRIGELLSRC, 'registration/tmp/*.jpeg'))]
   cmd = ' '.join(cmd)
   logger.info('Delete nousing captcha images')
   res = action(cmd,True,logger)   

   # synchronize 'Karrigell/ereception' to '/home/broader/EasyReception' 
   cmd = [ rsync,]   
   [ cmd.extend(a) for a in (RSYNCOPTIONS, [KARRIGELLSRC, LOCALGIT])]
   cmd = ' '.join(cmd)
   
   logger.info('Begin to backup loacl karrigell diretory to local git.\n')
   	
   res = action(cmd,test,logger)   
   if res[0] != 0 and not test:
      logger.info('Something is wrong!')
      return   
   else:
      logger.info('End backup loacl karrigell diretory to local git.')
   
   # synchronize 'EasyReception' to remote github host    
   logger.info('Begin to backup local github to remote github host.')
   
   #[action( cmd, test,logger) for cmd in ('cd /home/broader/develop/EasyReception', 'pwd')]    
   
   # get current date info
   now = datetime.datetime.today().isoformat()
   info = 'Update time:%s'%now
   options = [ 'add .', "commit -m '%s'"%info, 'push origin master']
   for option in options:
      cmd = ' '.join((git, option))      
      res = action(cmd, test,logger)
      
   logger.info('End backup local github to remote github host.')
   logging.shutdown()
   return

if __name__ == '__main__':	
	run(test=False) 
