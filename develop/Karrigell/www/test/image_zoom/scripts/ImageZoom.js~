var ImageZoom = new Class({
	Implements: Options,
	options: {
		// the container holds the big image 
		zoomerImageContainer: null,
		zoomerContainerCssClass: 'zoomer_big_container',
		// the big zoomer image url 
		zoomerImageUrl: null,		
		// the container holds the thumbnail image 		
		thumbContainer: null,
		thumbContainerCssClass: 'zoomer_thumb',
		thumbUrl: null,
		// zoomer region in thumbnail, this 'id' is just used in class instance inner 	
		thumbZoomerRegionCss: 'zoomer_region',

		zoomSize: 6,	// the scaled size of the thumbnail 
		initFn: null,
		dragFn: null
	},
					   
	initialize: function(option){
		this.setOptions(option);
		
		this.zoomSize = this.options.zoomSize; // the scaled size of the thumbnail
		$(this.options.zoomerImageContainer).addClass(this.options.zoomerContainerCssClass);
		$(this.options.thumbContainerCssClass).addClass(this.options.thumbContainerCssClass);
		
		this.thumbnail = new Asset.image( this.options.thumbUrl,{
			onload: function(){
				// clear the thumb image container
				//$(this.options.thumbContainer).empty();
				
				this.thumbnail.inject(this.options.thumbContainer);
				this.generateZoomer( new Hash({ x:this.thumbnail.width , y:this.thumbnail.height }) );
			}.bind(this)
		});				
		
		// user defined function
		if(this.options.initFn) this.options.dragFn({
			x: 0, y: 0, 
			range:{
				xrange:[0, this.thumbnail.width*this.zoomSize], 
				yrange:[0, this.thumbnail.height*this.zoomSize]
			}
		});
				
	},
	
	generateZoomer: function( thumb_size ){
		this.setDimensions(this.options.thumbContainer,thumb_size.x,thumb_size.y);
		this.setDimensions(this.options.zoomerImageContainer,thumb_size.x*this.zoomSize,thumb_size.y*this.zoomSize);
		
		this.bigImage = new Asset.image( this.options.zoomerImageUrl, {
			//id: 'test' ,
			onload: function(){				
				// add some required css styles to the image element 
				this.bigImage.setStyles({'display':'block', 'position':'absolute'});
				this.bigImage.inject(this.options.zoomerImageContainer);
				/* determine the proportions between the thumbnail and the zoomed image*/
				
				var ratioX = this.bigImage.width/thumb_size.x;
				var ratioY = this.bigImage.height/thumb_size.y;
				/* set the size of the zoomed area on thumbnail */
				var regionWidth = (thumb_size.x/ratioX).toInt()*this.zoomSize;
				var regionHeight = (thumb_size.y/ratioY).toInt()*this.zoomSize;				
				this.thumbZoomerRegion = new Element('div', {
					styles: {
						'width': regionWidth,
						'height': regionHeight,
						'opacity': .7
					}
				}).inject(this.options.thumbContainer).addClass(this.options.thumbZoomerRegionCss);
				
				/* move the zoomed image when the zoomer region is dragged on the thumbnail */
				new Drag(this.thumbZoomerRegion, {
					modifiers: {x: 'left', y: 'top'},
					grid:1,
					limit: {x:[0,(thumb_size.x - regionWidth)], y:[0, (thumb_size.y-regionHeight)]},
					onDrag: function(el){
						/* get the zoomed position on thumbnail */
						var pos = el.getPosition(this.options.thumbContainer);
						
						/* calculate where the zoomed image should be positioned */
						var calcLeft = -(pos.x*ratioX);
						var calcTop = -(pos.y*ratioY);
						/* set a few conditions in case the ratio between the thumbnail and the zoomed image is a float number */
						var bigImgLeft = this.bigImage.width - (thumb_size.x*this.zoomSize);
						var bigImgTop = this.bigImage.height - (thumb_size.y*this.zoomSize);						
						var left = (-calcLeft) > bigImgLeft ? -bigImgLeft : calcLeft;
						var top = (-calcTop) > bigImgTop ? -bigImgTop : calcTop;
						/* set the position of the zoomed image according to the position of the zoomed area on thumbnail */
						
						this.setPosition(this.bigImage,left,top);
						
						// user defined function
						if(this.options.dragFn) this.options.dragFn({
							x:left, y: top, 
							range:{
								xrange:[-left,-left+thumb_size.x*this.zoomSize], 
								yrange:[-top, -top+thumb_size.y*this.zoomSize]
							}
						});						
						
					}.bind(this)
				});	
				
				/* drag directly on the zoomed image. Also updates the zoomed region on the thumbnail */	
			   this.DragBig = new Drag(this.bigImage, {
					modifiers: {x:'left',y:'top'},
					grid:1,
					onDrag: function(elem){						
						var pos = elem.getPosition(this.options.zoomerImageContainer);
						
						var left = pos.x;
						var top = pos.y;
						
						/* if the zoomed image is dragged outside boundaries, set the correct position */
						if(	
							pos.x>0 || 
							pos.y>0 || 
							-pos.x > this.bigImage.width-(thumb_size.x*this.zoomSize) || 
							-pos.y > this.bigImage.height-(thumb_size.y*this.zoomSize)
						)
						{													
							if(pos.x > 0) left = 0;// fix the left drag margin 
							if(pos.y > 0) top = 0;// fix the top drag margin
							
							// fix the right drag margin 
							if ( -pos.x > this.bigImage.width-(thumb_size.x*this.zoomSize) ) 
								left = -1*(this.bigImage.width-(thumb_size.x*this.zoomSize));
							
							// fix the bottom drag margin 
							if( -pos.y > this.bigImage.height-(thumb_size.y*this.zoomSize) ) 
								top = -1*(this.bigImage.height-(thumb_size.y*this.zoomSize));
							
							this.setPosition(this.bigImage,left,top);					
						};
						
						
						/* moves the zoomed region on thumbnail according to the position of the zoomed image */
						this.setPosition(this.thumbZoomerRegion,-(left/ratioX),-(top/ratioY));
						
						// user defined function
						if(this.options.dragFn) this.options.dragFn({
							x:left, y: top, 
							range:{
								xrange:[-left,-left+thumb_size.x*this.zoomSize], 
								yrange:[-top, -top+thumb_size.y*this.zoomSize]
							}
						});						
					}.bind(this)
				})				
			}.bind(this)
		});
			
	},
	
	setDimensions: function(element,width,height){
		$(element).setStyles({
			'width':width,
			'height':height
		});
	},
	
	setPosition: function(element,left,top){
		$(element).set({
			styles:{
				'left': left,
				'top':top
			}
		})
	}
})

/*
window.addEvent('domready', function(){
		new ImageZoom();
});
*/