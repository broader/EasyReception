[]
# -*- coding: utf_8 -*-
STDOUT("/*\nINITIALIZE THE USER\'S MENUS\n*/\n")
# PYTHON CODE SLICE
# get meus stored in pagefn.py
pagefn = Import('/'.join(('', 'pagefn.py')))
# initialize some page variables
loginApp, sidePanelPrefix = \
[getattr(pagefn,name) for name in ('LOGINAPPNAME', 'SIDEPANELPREFIX')]
sideBar, mainColumn = pagefn.COLUMNS
STDOUT("// the id of main panel in right main column\nvar mainPanelId = \'")
STDOUT(str(pagefn.PANELSID['main']))
STDOUT("\';\n// get the global Assets manager\nvar am = MUI.assetsManager;\n/*\nInitialize the top navigation info on the top right of the screen, \nthen switch the menu according user\'s login status.\n*/\nfunction topNavSwitch(login){\n	var topNav = $(\'")
STDOUT(str(pagefn.LOGINPANEL))
STDOUT("\')\n	var children = topNav.getChildren();\n	var url = \'portaLayout.ks/page_welcomeInfo\';\n	switch(login){\n		case true:			\n			if(children.length < 2){\n				// append welcom information to top navigation bar\n				var span = new Element(\'span\');\n				span.load(url);			\n				topNav.grab(span);\n				topNav.getElements(\'ul\')[0].setProperty(\'style\',\'display:none;\');\n			}\n			else{\n				// just insert content to the welcome information container and \n				// envisible the container element\n				children[0].setProperty(\'style\',\'display:none;\');\n				children[1].load(url).setProperty(\'style\',\'display:block;\');\n			}\n			break\n		case false:\n			// delete the content in the welcome information container and \n			// make it invisible\n			children[0].setProperty(\'style\',\'display:block;\');\n			children[1].setProperties({\n				\'html\': \'\',\n				\'style\': \'display:none;\'\n			});\n			break\n	}\n};\n/*\nInitialize menu by json data from server side\n*/\nfunction menuInit(){\n	var data = new Request.JSON({\n		async: false,\n		url: \"portaLayout.ks/page_menu\", \n		onSuccess:function(json,html){	\n			var assetOptions = {\n				\'url\':json[\'js\'],	// load the menus\' corresponding clickable functions\n				\'app\':\'")
STDOUT(str(loginApp))
STDOUT("\',\n				\'type\':\'js\'\n			};\n			var onloadOptions = {\n				onload: function(){\n					// load html slice to the navigation bar		\n					var ul = new Element(\'ul\');\n					ul.set(\'load\', {url:json.url, async:false});\n					ul.load();\n					$(\'")
STDOUT(str(pagefn.MENUCONTAINER))
STDOUT("\').grab(ul,\'top\');\n					/*\n					  Add event to each menu item\n					  \'json.functions\' is a dictionary object, \n					  its key is the \'id\' of the <a> tag,\n					  its value is a dictionary object whose format is {\'funcname\':..., \'popupWindowId\':... }\n					*/\n					$H(json.functions).each(function(func, nid){\n						$(nid).setProperties({\n							\'style\':\'text-decoration:none;\',\n							\'href\': \'javascript:;\'\n						});\n						$(nid).store(\'popupWindowId\',func.popupWindowId);\n						if($type(window[func.funcname])) {\n							/*\n							 For pop up window, it\'s need to pass window\'s id to \n							 popupWindow function in \"js/userMenus.js\" file.\n							*/\n							if(func.funcname == \'popupWindow\'){\n								$(nid).addEvent(\n									\'click\', \n									window[func.funcname].pass(func.popupWindowId)\n								);\n							}\n							else{\n								$(nid).addEvent(\'click\', window[func.funcname]);\n							};\n						}\n					});\n				}\n			};\n			// load js slice\n			am.import( assetOptions, onloadOptions );\n		}\n	}).get();\n};\n/*\nInitialize layout in main window\n*/\n// Add two columns, one is sidebar and the other is the main column.\nfunction addColumns(){\n	/*\n	All these two MUI.Column instance are to be added to MUI.Desktop.pageWrapper, \n	so it\'s no need to set \'container\' option when initializing these two\n	MUI.Column instances.\n	*/\n	// first, add columns to main window of the desktop	\n	new MUI.Column({\n		id:\'")
STDOUT(str(sideBar))
STDOUT("\', placement:\'left\', width:200, \n		resizeLimit:[100, 300], sortable: true\n	});\n	new MUI.Column({ \n		id:\'")
STDOUT(str(mainColumn))
STDOUT("\', placement:\'main\',\n		resizeLimit:[100, 500], sortable: false\n	});\n	// add the main MUI.Panel to the main MUI.Column\n	new MUI.Panel({\n		id: mainPanelId, header:false, column: \'")
STDOUT(str(mainColumn))
STDOUT("\'\n	});\n};\n// Traditional layout by columns and panels\nfunction gridLayout(json){\n	addColumns();						\n	json[\'data\'].each(function(item,index){														\n		var pid = [\'")
STDOUT(str(sidePanelPrefix))
STDOUT("\', item[\'id\']].join(\'-\'),\n		    text=item[\'text\'], url=item[\'contentURL\'], \n		    expandfn=item[\'onExpand\'], collapse=item[\'onCollapse\'];\n		// add panel in left sidebar column\n		var panel = new MUI.Panel({\n			id:pid, title:text, contentURL:url, \n			onExpand:window[expandfn].pass(pid),\n			onCollapse: window[collapse].pass(pid),					\n			column: \"")
STDOUT(str(sideBar))
STDOUT("\",					\n			onContentLoaded: function(){}\n		});\n		// collapse others panels, only left the first panel expanded\n		if(index != 0){panel.toggleExpand();};\n	});\n};\n// Desktop style layout\nfunction desktopLayout(json){\n	MUI.Desktop.initialize();\n	MUI.Dock.initialize();\n	// set the background of the desktop\n	$(\"pageWrapper\").store(\'background\', $(\"pageWrapper\").getStyle(\'background\'));\n	$(\"pageWrapper\").setStyle(\'background\', \'#777\');\n	// Deactivate menu header links\n	$$(\'a.returnFalse\').each(function(el){\n		el.addEvent(\'click\', function(e){\n			new Event(e).stop();\n		});\n	});\n	// the sticky notes widget on desktop\n	/*\n	$(\'pageWrapper\').adopt( \n		new Element(\'div\', {\'id\':\'stickyNotes\', \'style\':\'width:800px;height:400px;background-color:gainsboro;\'}) \n	);\n	*/\n	new Asset.css(\'lib/stickyNotes/stickyNotes.css\');\n	new Asset.javascript(\'lib/stickyNotes/stickyNotes.js\', {\n		onload: function(){\n			var options = {\n				dropElements: [$(\'pageWrapper\'),],\n				container: $(\'pageWrapper\'),\n				notesDataUrl: \'lib/stickyNotes/test.ks/page_data\',\n				layout: \'cascade\' \n			};	\n			var sn = new StickyNotes(options);\n	}});\n	// a clock window \n	new MUI.Window({\n		id: \'clock\',\n		title: \'Canvas Clock\',\n		addClass: \'transparent\',\n		loadMethod: \'xhr\',\n		contentURL: \'plugins/coolclock/index.html\',\n		shape: \'gauge\',\n		headerHeight: 30,\n		width: 160, height: 160,\n		x: 1170, y: 82,\n		padding: { top: 0, right: 0, bottom: 0, left: 0 },\n		require: {			\n			js: [\'plugins/\' + \'coolclock/scripts/coolclock.js\'],\n			onload: function(){\n				if (CoolClock) new CoolClock();\n			}	\n		}			\n	});\n	// application windows on desktop\n	var res = new Request.JSON();\n	// set some options for Request.JSON instance\n	res.setOptions({\n		url: \'portaLayout.ks/page_windowsConfig\',\n		onSuccess: function(json){\n			if(json.length == 0 ) return;\n			json.each(function(option,index){\n				if( option.shape == \'gauge\'){\n					new MUI.GaugeWindow(option);	\n				}\n				else new MUI.Window(option);\n			});\n		}\n	});\n	res.get();\n};\n// the layout config handler \nfunction layoutInit(userData){	\n	// get panels on the left column\n	new Request.JSON({\n		url: \"portaLayout.ks/page_sideBarPanels\", \n		onSuccess:function(json,html){					\n			am.import(\n				{\n					\'url\':json[\'js\'],	// load the functions for the events of sidePanels\n					\'app\':\'")
STDOUT(str(loginApp))
STDOUT("\',\n					\'type\':\'js\'\n				},\n				{\n					onload: function(){\n						if(userData.portal == \"")
STDOUT(str(pagefn.PORTALTYPE[1]))
STDOUT("\")\n							desktopLayout(json);\n						else{	gridLayout(json); }\n					}\n				}\n			);\n		}\n	}).get();	\n};\n// Add some assistant tools to MUI\nMUI.extend({\n	// login function \n	login: function(userData){\n		var menuChain = new Chain();\n		menuChain.chain(\n			topNavSwitch(true),\n			menuInit(),\n			layoutInit(userData)			\n		).callChain();\n	},\n	// logout function\n	logout: function(event){\n		new Event(event).stop();\n		// close all opened MUI.Window\n		MUI.closeAllWindows();		\n		// remove menus in menu bar\n		$(\'")
STDOUT(str(pagefn.MENUCONTAINER))
STDOUT("\').getElement(\'ul\').dispose();\n		// reset the top navigation info\n		topNavSwitch(false);\n		// remove the columns in main window\n		MUI.Columns.instances.getKeys().each(function(key,index){\n			// Only the first two key ( the ids of side column and main column )\n			// are the reall existed MUI.Column instance,\n			// others should be no existed.\n			var columns = [\'")
STDOUT(str(sideBar))
STDOUT("\',\'")
STDOUT(str(mainColumn))
STDOUT("\'];\n			if(columns.contains(key)){ MUI.closeColumn($(key));};\n		});\n		// clear the hash objects that save MUI.Column  instances and MUI.Panel instances\n		MUI.Columns.instances.empty();\n		MUI.Panels.instances.empty();\n		// clear body in the page and set the background of the desktop\n		$(\"pageWrapper\").empty().setStyle(\'background\', $(\"pageWrapper\").retrieve(\'background\'));\n		// remove all the imported mootools.Assets\n		MUI.assetsManager.remove(\'")
STDOUT(str(loginApp))
STDOUT("\', \'app\');\n		// close session object on server side\n		// application initialization, including closing old session and removing old cookie\n		MUI.appInit();\n	},\n	// set the id for the main MUI.Panel\n	mainPanelId: mainPanelId,\n	// remove all the MUI.Columns in the main panel\n	clearMainPanel: function (){	\n		MUI.Columns.instances\n		.filter(function(column,key){		// filter the instances whose element has been removed			\n			return $(column.options.id) != null;\n		})\n		.each(function(column){			\n			if(column.options.container.id == mainPanelId){\n				MUI.closeColumn($(column.options.id));\n			}\n		});\n	},\n	// refresh the content of the specifized MUI.Panle by its panel ID\n	refreshPanel: function(panelId){\n		var panel = MUI.getPanel(panelId);\n		if (panel) panel.newPanel();\n	},\n	// collapse all other panels, only left user selected panel\n	accordionPanels: function(selectedId){\n		// get the MUI.Column of this MUI.Panel\n		var column = MUI.Panels.instances.get(selectedId).options.column;\n		MUI.Panels.instances.each(function(panel){\n			if (panel.options.column != column){\n				return\n			};\n			if (panel.options.id != selectedId && panel.isCollapsed != true ){\n				panel.toggleExpand();\n			};\n		});\n	},\n	// initialzie actions before expand a MUI.Panel in the left side bar\n	initPanel: function(panelId){\n		// remove error tips which generated by \"FormCheck\" lib\n		MUI.removeErr();\n		// collapsed others MUI.Panels\n		MUI.accordionPanels(panelId);\n		// empty the main Panel which is to be used to show main page\n		MUI.clearMainPanel();\n	},\n	// judge file type by its name\n	fileType: function(url){\n		fileType = \'\';\n		if(url.contains(\'.css\')){fileType=\'css\';}\n		else if(url.contains(\'.js\') || url.contains(\'.js.pih\')){fileType=\'js\';}		\n		return fileType\n	},\n	/***************************************************************\n	A common function to handle import aciton for Mootools.Assets.\n	Here we assume that there is only one \'js\' file.\n	****************************************************************/\n	import: function(appName,urls,options){\n		// get the global Assets manager\n	   	var am = MUI.assetsManager;		\n		urls.each(function(src){\n			fileType = MUI.fileType(src);	\n			if(fileType == \'css\'){\n				if(!$defined(am.imported[src])){\n	    				am.import({\'url\':src,\'app\':appName,\'type\':\'css\'});	\n				};\n			}\n			else if(fileType == \'js\'){\n				if(!$defined(am.imported[src])){\n					am.import({\'url\':src,\'app\':appName,\'type\':\'js\'},options);\n				}\n				else{\n					// this plugin files have been imported,\n					// so just run the function\n					fn = options.onload;					\n					if($defined(fn)){fn();}\n				};	   \n			};			\n		});	   \n	},\n	/******************************************************************\n	Imports form validation lib and sets initial actions.	\n	*******************************************************************/\n	formValidLib: function(appName, options){\n		// get lib files\n		var urls = [];\n")
for url in pagefn.JSLIB['formValid']['files'] :
 STDOUT("			urls.push(\'")
 STDOUT(str(url))
 STDOUT("\');\n")
STDOUT("		// get the global Assets manager\n		var am = MUI.assetsManager;\n		// import css file for validation\n		urls.slice(0,2).each(function(src){\n			if(!$defined(am.imported[src])){\n				am.import({\'url\':src,\'app\':appName,\'type\':\'css\'});\n			}	\n		});\n		// i18n file of this lib\n		url = urls[2];\n		if(!$defined(am.imported[url])){\n			am.import({\'url\':url,\'app\':appName,\'type\':\'js\'});\n		};\n		// the really validation functions\n		am.import({\'url\':urls[3],\'app\':appName,\'type\':\'js\'},options);\n	},\n	/*********************************************************************\n	Imports treeTable lib and sets initial actions.	\n	**********************************************************************/\n	treeTable: function(appName,options){\n		// get lib files\n		var urls = [];\n")
for url in pagefn.JSLIB['treeTable']['files'] :
 STDOUT("			urls.push(\'")
 STDOUT(str(url))
 STDOUT("\');\n")
STDOUT("		MUI.import(appName,urls, options);\n	},\n	/***********************************************************************\n	Imports grid lib and sets initial actions.\n	************************************************************************/\n	dataGrid: function(appName, options){\n		// get lib files\n		var urls = [];\n")
for url in pagefn.JSLIB['dataGrid']['files'] :
 STDOUT("			urls.push(\'")
 STDOUT(str(url))
 STDOUT("\');\n")
STDOUT("		MUI.import(appName,urls,options);\n	},\n	/***********************************************************************\n	Imports TextMultiCheckbox plugin\n	************************************************************************/\n	textMultiCheckbox: function(appName, options){\n		// get lib files\n		var urls = [];\n")
for url in pagefn.JSLIB['textMultiCheckbox']['files'] :
 STDOUT("			urls.push(\'")
 STDOUT(str(url))
 STDOUT("\');\n")
STDOUT("		MUI.import(appName,urls,options);\n	},\n	/**********************************************************************\n	Import InlineEdit plugin files and initialize corresponding Elements.\n	***********************************************************************/\n	inlineEdit: function(appName, elsArray){\n		options = {\n			onload: function(){\n				elsArray.each(function(elObject){\n					editEl = new InlineEditElement(elObject.element, elObject.options);\n				});\n			}\n		};\n		// get lib files\n		var urls = [];\n")
for url in pagefn.JSLIB['inlineEdit']['files'] :
 STDOUT("			urls.push(\'")
 STDOUT(str(url))
 STDOUT("\');\n")
STDOUT("		MUI.import(appName,urls,options);\n	},\n	/**********************************************************************\n	Import multiselect plugin files and initialize correspinding Elements.\n	***********************************************************************/\n	multiSelect: function(appName, options){\n		// get lib files\n		var urls = [];\n")
for url in pagefn.JSLIB['multiSelect']['files'] :
 STDOUT("			urls.push(\'")
 STDOUT(str(url))
 STDOUT("\');\n")
STDOUT("		MUI.import(appName,urls,options);\n	},\n	/**********************************************************************\n	Import smartList plugin files and initialize corresponding Elements.\n	***********************************************************************/\n	smartList: function(appName, options){\n		// get lib files\n		var urls = [];\n")
for url in pagefn.JSLIB['smartList']['files'] :
 STDOUT("			urls.push(\'")
 STDOUT(str(url))
 STDOUT("\');\n")
STDOUT("		MUI.import(appName,urls,options);\n	}\n});\n")

