[]
# -*- coding: utf_8 -*-
STDOUT("/* \n	In this file, first set the layout of the application, such as desktop and\n	menu dock, etc. Then set the menus\' function in login panel.\n*/\n/*\nINITIALIZE THE TWO MENU \'Login\' AND \'Register\'\n	1. \'Register\' menu clicked function\n	2. \'Login\' menu clicked function	\n-------------------------------------------------------------------- */\n")
# PYTHON CODE
# get global variables stored in pagefn.py
pagefn = Import('/'.join(('', 'pagefn.py')))
registerTabsUrls = [ item.get('url') for item in pagefn.REGISTERTABS ]
# initial showing tabs' url
iniTabUrl = registerTabsUrls[0]
# Application name, when closing the registration dialog,
# this name will be need to remove all the imported Assets tags.
registerAppName = pagefn.getApp(iniTabUrl,0)
STDOUT("/****************************************************************************************\nAdd some assistant tools to MUI\n*****************************************************************************************/\nMUI.extend({\n	// add a inner object to MUI for managing mootools.Assets importing action \n	assetsManager: new AssetsManager(),\n	/**********************************************************************************\n	Clear cookie of this application, the cookie name is defined in \'pagefn.py\' file.\n	Close old session of this application.\n	***********************************************************************************/\n	appInit: function(){\n		//** to be removed\n		// remove old cookie		\n		var name = \'")
STDOUT(str(pagefn.COOKIENAME))
STDOUT("\';		\n		if(Cookie.read(name) != null){\n			Cookie.dispose(name);\n		};\n		// close old session object\n		new Request.HTML().get(\'")
STDOUT(str(pagefn.LAYOUTURLS[-1]))
STDOUT("\');\n	},\n	// a plugin to close single popup dialog window, such as login or register dialog \n	closeModalDialog: function(){\n		// Remove form validation error informations that may be left.\n		MUI.removeErr();\n		// close modal dialog		\n		MUI.Windows.instances.each(function(w){\n   			if(w.options.type==\'modal\'){ w.close();	};\n   		}); \n   		return true\n	},\n	// a function to remove error prompts for FormCheck lib\n	removeErr: function(){\n		// If there are left error information DIV elements created by \n		// FormCheck object, remove them.				\n		for ( i in window){\n			if ( window[i] instanceof FormCheck ){\n				window[i].removeErrors();\n			}					\n		};		\n	},\n	/*************************************************************************************************************\n	Return a styled <button> Element that provided by SexyButton plugin<http://code.google.com/p/sexybuttons/>.\n	Parameters:\n	options- a json object holds the setting options,\n				which has keys \'txt\',\'bnAttrs\',\'bnType\',\'bnSize\',\'bnSkin\'.\n				\'txt\',the text on the button;\n				\'bnAttrs\', optional, the attributes of the button;\n				\'imgType\', the predefined type determined what image to be shown on the button, such as \'ok\'\n				\'bnSize\', optional,it should be one of \'sexysmall\',\'sexymedium\',\'sexylarge\'\n				\'bnSkin\', optionsal,the background color for the button \n	**************************************************************************************************************/\n	styledButton: function(options){\n		var bnClass = [\'sexybutton\',\'sexysimple\'];	\n		// default settings	\n		$H({\'bnSize\':\'sexymedium\', \'bnSkin\':\'sexysimple\'}).each(function(value,prop){\n			bnClass.push( options[prop]||value);\n		});\n		// merge user defined attributes for button\n		var bnAttrs = {\'class\': bnClass.join(\' \')};\n		if(options.bnAttrs){			\n			$H(options.bnAttrs).each(function(value,key){				\n				bnAttrs[key] = value;\n			});			\n		};\n		var button = new Element(\'button\', bnAttrs);		\n		var span = new Element(\'span\',{\n			html: options.txt || \'\',\n			\'class\': options.imgType\n		});		\n		button.grab(new Element(\'sapn\').grab(span));\n		return button; \n	},\n	//	Pop up a window to require user to confirm a action. \n	confirm: function(message,closeFn, options){\n		var defaultOptions = {\n			loadMethod:\'html\', type: \'modal\', title: \'\',\n			maximizable: false,\n			//minimizable: false,\n			//resizable: false,				\n			width:320, height:160, y: 120, \n			padding:  { top: 10, right: 12, bottom: 10, left: 12 },\n			shadowBlur: 8\n		};\n		$H(options).each(function(value,key){\n			detaultOptions[key] = value;\n		});\n		var cmWindow = new MUI.Window(defaultOptions);\n		var messageEl = new Element(\'div\',{\n			html: message,\n			\'class\':\'note\',\n			\'style\':\'font-weight:bold;font-size:1.5em;\'\n		});\n		// add buttons to content\n		var buttons = new Element(\'div\',{style:\'text-align:right;\'});\n		var labels = [\'")
STDOUT(str(pagefn.BUTTONLABELS['confirmWindow']['confirm']))
STDOUT("\', \'")
STDOUT(str(pagefn.BUTTONLABELS['confirmWindow']['cancel']))
STDOUT("\'];\n		[\'ok\',\'cancel\'].each(function(actionType,index){\n			// create buttons\n			options = {\n				txt: labels[index],\n			        imgType: actionType,\n				bnAttrs: {\'style\':\'margin-right:1em;\'}\n				//bnSkin: \'sexycadet\'\n			};			\n			button = MUI.styledButton(options);\n			button.addEvent(\'click\', function(e){		\n				new Event(e).stop();						\n				// close confirm window\n				cmWindow.close();				\n				closeFn(index);\n			});\n			buttons.grab(button);\n		});		\n		var container = new Element(\'div\');\n		container.adopt(messageEl,buttons);			\n		// add content to this confirm window\n		MUI.updateContent({\n			\'element\': cmWindow.windowEl,\n			\'content\': container,\n			\'method\': \'html\',\n			//\'url\': options.contentURL,\n			//\'data\': options.data,\n			\'onContentLoaded\': null,\n			\'require\': {}			\n		});\n	},\n	// Create a customed window for show alert information.\n	alert: function(message, options){\n		defaultOptions = {\n			loadMethod:\'html\', type: \'modal\', title:\'\',\n			maximizable: false, minimizable: false,\n			//resizable: false,				\n			width:320, height:140, y: 120, \n			padding:  { top: 10, right: 12, bottom: 10, left: 12 },\n			shadowBlur: 8\n		};\n		$H(options).each(function(value,key){\n			detaultOptions[key] = value;\n		});\n		aWindow = new MUI.Window(defaultOptions);\n		messageEl = new Element(\'div\',{\n			html:message,\n			\'class\':\'info\',\n			\'style\':\'font-weight:bold;font-size:1.5em;\'\n		});\n		hr = new Element(\'hr\',{style:\'padding:0.8px;\'});\n		// add buttons to content\n		buttons = new Element(\'div\',{style:\'text-align:right;\'});\n		labels = [\'")
STDOUT(str(pagefn.BUTTONLABELS['alertWindow']['ok']))
STDOUT("\', ];\n		[\'ok\',].each(function(actionType,index){\n			// create buttons\n			options = {\n				txt: labels[index],\n			   imgType: actionType,\n				bnAttrs: {\'style\':\'margin-right:1em;\'}\n				//bnSkin: \'sexycadet\'\n			};			\n			button = MUI.styledButton(options);\n			button.addEvent(\'click\', function(e){		\n				new Event(e).stop();						\n				// close confirm window\n				aWindow.close();\n			});\n			buttons.grab(button);\n		});		\n		container = new Element(\'div\');\n		container.adopt(messageEl, hr, buttons);			\n		// add content to this window\n		MUI.updateContent({\n			\'element\': aWindow.windowEl,\n			\'content\': container,\n			\'method\': \'html\',\n			\'onContentLoaded\': null,\n			\'require\': {}			\n		});\n	}\n});\n// the names for prelogin menues\' click function \nvar fNames = [ \'login\', \'register\' ];\n// a object holds two functions for prelogin \nvar loginFns = {\n	/* The \'click\' callback function for the \'login\' menu. */\n	\'login\': function(event){\n		new Event(event).stop();\n		modal = new MUI.Modal({\n			//id: dlgId,\n			title: \'")
STDOUT(str(_("Login Dialog")))
STDOUT("\',			\n			contentURL: \"")
STDOUT(str(pagefn.LOGINFORM))
STDOUT("\",\n			//type: \'modal2\',\n			modalOverlayClose: false,\n			width: 400,\n			height: 300,\n			//padding: { top: 10, right: 12, bottom: 10, left: 12 },\n			scrollbars: true,\n			onClose: function(e){\n				MUI.removeErr();\n			}			\n		});\n		return modal\n	},\n	\'register\': function(event){\n		new Event(event).stop();\n		var dlgId = \'")
STDOUT(str(pagefn.REGISTERDIALOG))
STDOUT("\'; \n		var tabsId = \'")
STDOUT(str(pagefn.REGISTERTABSID))
STDOUT("\';\n		// using python inside html to set the tabs\' url to a javascript array\n		var tabUrls = []; \n")
for url in registerTabsUrls:
 STDOUT("			tabUrls.push(\"")
 STDOUT(str(url))
 STDOUT("\");\n")
STDOUT("		// Define a tab switching function. It\'s a global function and will be called\n		// in registration form submitting process, for this reason we should not use\n		// \'var\' before the variable.\n		tabSwitch = function(index) {\n			var spinner = new Spinner(dlgId+\'_content\'); 						\n			spinner.show();\n			$(tabsId).getElements(\'li\')[index].fireEvent(\'click\');						\n			MUI.updateContent({\'element\':$(dlgId), \'url\':tabUrls[index]});\n			spinner.hide();\n		};\n		new MUI.Modal({\n			id: dlgId,\n			title: \'")
STDOUT(str(_("Register Dialog")))
STDOUT("\',			\n			contentURL: \'")
STDOUT(str(iniTabUrl))
STDOUT("\',\n			//type: \'modal2\',\n			modalOverlayClose: false,\n			width: 750,\n			height: 400,\n			padding: { top: 10, right: 12, bottom: 10, left: 12 },\n			scrollbars: true,\n			//shape: \'gaoge\',\n			toolbar: true,\n			toolbarURL:\'register/register.ks/tabs\',\n			toolbarOnload: function(){				\n				// add selected class to each tabs when they are selected				\n				MUI.initializeTabs(tabsId);\n				$(tabsId).getElements(\'li\')[0].fireEvent(\'click\');							\n			},\n			onClose: function(e){	\n				// remove validation errors\' information	\n				MUI.removeErr();		\n				// Remove all the imported Assets				\n				MUI.assetsManager.remove(\'")
STDOUT(str(registerAppName))
STDOUT("\',\'app\');\n			}			\n		});\n		return false;\n	}\n};\nfunction preLoginInit(){	\n	$(\'topNav\').getElements(\'li\').each(function(item,index){\n		item.addEvent(\'click\', loginFns[fNames[index]]);\n	});\n	// application initialization, including closing old session and removing old cookie\n	MUI.appInit();\n};\n// Initialize MochaUI when the DOM is ready\nwindow.addEvent(\'load\', function(){ //using load instead of domready for IE8\n	MUI.myChain = new Chain();\n	MUI.myChain.chain(\n		function(){MUI.Desktop.initialize();},\n		function(){MUI.Dock.initialize();},\n		preLoginInit()		\n	).callChain();	\n});\n")

