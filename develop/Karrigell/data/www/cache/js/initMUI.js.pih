[]
# -*- coding: utf_8 -*-
STDOUT("/*\n    This module just for extending some functions to Mocha\'s \"MUI\" module.\n*/\n/*****************************************************************************************\n")
# PYTHON CODE
# import pagefn.py module to access some global variables
pagefn = Import('/'.join(('', 'pagefn.py')))
STDOUT("*****************************************************************************************/\n// set the MooTools.lang\nvar usrLang = (navigator.language)? navigator.language: navigator.userLanguage;\nMooTools.lang.setLanguage(usrLang);\n/****************************************************************************************\nAdd or extend some assistant tools to MUI\n*****************************************************************************************/\nMUI.extend({\n    // close all the opened MUI.Window instances\n    closeAllWindows: function(){\n	this.Windows.instances.each(function(instance){\n	    this.closeWindow(instance.windowEl);\n	}.bind(this));\n    },\n    // a function to find a panel by its id\n    getPanel: function(panelId){\n	var search = MUI.Panels.instances.filter(function(panel,key){\n	    if( key == panelId){return true;}\n	    else{return false;}\n	});\n	var keys = search.getKeys();	\n	if (keys.length == 1) return search[keys[0]];\n	return null;\n    },\n    // add a inner object to MUI for managing mootools.Assets importing action \n    assetsManager: new AssetsManager(),\n    /**********************************************************************************\n    Clear cookie of this application, the cookie name is defined in \'pagefn.py\' file.\n    Close old session of this application.\n    ***********************************************************************************/\n    appInit: function(){\n	/*\n	For recording the logined user, it\'s no need to delete cookie.\n	*/\n	// remove old cookie\n	//MUI.clearCookie();		\n    },\n    /*********************************************************************************\n    Clear information saved in cookie.\n    **********************************************************************************/\n    clearCookie: function(){\n	var name = \'")
STDOUT(str(pagefn.COOKIENAME))
STDOUT("\';		\n	if(Cookie.read(name) != null){\n		Cookie.dispose(name);\n	};\n    },\n    // a plugin to close single popup dialog window, such as login or register dialog \n    closeModalDialog: function(){\n	// Remove form validation error informations that may be left.\n	MUI.removeErr();\n	// close modal dialog		\n	MUI.Windows.instances.each(function(w){\n	    if(w.options.type==\'modal\') {\n		// remove error information created by \'formcheck\' lib\n		MUI.removeErr(w);\n		w.close();	\n	    }\n	}); \n	return true\n    },\n    _removeErr: function(mochaWindow){\n	// check whether there is forms in this modal\n	var forms = mochaWindow.windowEl.getElements(\'form\');\n	if(forms.length != 0){\n	    forms.each(function(form){\n		if(formcheck = form.retrieve(\'formcheck\'))\n		    formcheck.removeErrors();\n	    });\n	};\n    },\n    // a function to remove error prompts for FormCheck lib\n    removeErr: function(mochaWindow){\n	// If there are left error information DIV elements created by \n	// FormCheck object, remove them.\n	if(mochaWindow) MUI._removeErr(mochaWindow);\n	else{\n	    MUI.Windows.instances.each(MUI._removeErr);\n	};	\n    },\n    /*************************************************************************************************************\n    Return a styled <button> Element that provided by SexyButton plugin<http://code.google.com/p/sexybuttons/>.\n    Parameters:\n    options- a json object holds the setting options,\n	    which has keys \'txt\',\'bnAttrs\',\'bnType\',\'bnSize\',\'bnSkin\'.\n	    \'txt\',the text on the button;\n	    \'bnAttrs\', optional, the attributes of the button;\n	    \'imgType\', the predefined type determined what image to be shown on the button, such as \'ok\'\n	    \'bnSize\', optional,it should be one of \'sexysmall\',\'sexymedium\',\'sexylarge\'\n	    \'bnSkin\', optionsal,the background color for the button \n    **************************************************************************************************************/\n    styledButton: function(options){\n	var bnClass = [\'sexybutton\',\'sexysimple\'];	\n	// default settings	\n	$H({\'bnSize\':\'sexymedium\', \'bnSkin\':\'sexysimple\'}).each(function(value,prop){\n	    bnClass.push( options[prop]||value);\n	});\n	// merge user defined attributes for button\n	var bnAttrs = {\'class\': bnClass.join(\' \')};\n	if(options.bnAttrs){			\n	    $H(options.bnAttrs).each(function(value,key){				\n		bnAttrs[key] = value;\n	    });			\n	};\n	var button = new Element(\'button\', bnAttrs);		\n	var span = new Element(\'span\',{\n	    html: options.txt || \'\',\n	    \'class\': options.imgType\n	});		\n	button.grab(new Element(\'sapn\').grab(span));\n	return button; \n    },\n    //	Pop up a window to require user to confirm a action. \n    confirm: function(message,closeFn, options){\n	var defaultOptions = {\n	    loadMethod:\'html\', type: \'modal\', title: \'\',\n	    maximizable: false,\n	    width:320, height:160, y: 120, \n	    padding:  { top: 10, right: 12, bottom: 10, left: 12 },\n	    shadowBlur: 8\n	};\n	$H(options).each(function(value,key){\n	    detaultOptions[key] = value;\n	});\n	var cmWindow = new MUI.Window(defaultOptions);\n	var messageEl = new Element(\'div\',{\n	    html: message,\n	    \'class\':\'note\',\n	    \'style\':\'font-weight:bold;font-size:1.5em;\'\n	});\n	// add buttons to content\n	var buttons = new Element(\'div\',{style:\'text-align:right;\'});\n	var labels = [\'")
STDOUT(str(pagefn.BUTTONLABELS['confirmWindow']['confirm']))
STDOUT("\', \'")
STDOUT(str(pagefn.BUTTONLABELS['confirmWindow']['cancel']))
STDOUT("\'];\n	[\'ok\',\'cancel\'].each(function(actionType,index){\n	    // create buttons\n	    options = {\n		txt: labels[index],\n		imgType: actionType,\n		bnAttrs: {\'style\':\'margin-right:1em;\'}\n		//bnSkin: \'sexycadet\'\n	    };			\n	    button = MUI.styledButton(options);\n	    button.addEvent(\'click\', function(e){		\n		new Event(e).stop();						\n		// close confirm window\n		cmWindow.close();				\n		closeFn(index);\n	    });\n	    buttons.grab(button);\n	});		\n	var container = new Element(\'div\');\n	container.adopt(messageEl,buttons);			\n	// add content to this confirm window\n	MUI.updateContent({\n	    \'element\': cmWindow.windowEl,\n	    \'content\': container,\n	    \'method\': \'html\',\n	    //\'url\': options.contentURL,\n	    //\'data\': options.data,\n	    \'onContentLoaded\': null,\n	    \'require\': {}			\n	});\n    },\n    // Create a customed window for show alert information.\n    alert: function(message, options){\n	defaultOptions = {\n	    loadMethod:\'html\', type: \'modal\', title:\'\',\n	    maximizable: false, minimizable: false,\n	    //resizable: false,				\n	    width:320, height:140, y: 120, \n	    padding:  { top: 10, right: 12, bottom: 10, left: 12 },\n	    shadowBlur: 8\n	};\n	$H(options).each(function(value,key){\n	    detaultOptions[key] = value;\n	});\n	aWindow = new MUI.Window(defaultOptions);\n	messageEl = new Element(\'div\',{\n	    html:message,\n	    \'class\':\'info\',\n	    \'style\':\'font-weight:bold;font-size:1.5em;\'\n	});\n	hr = new Element(\'hr\',{style:\'padding:0.8px;\'});\n	// add buttons to content\n	buttons = new Element(\'div\',{style:\'text-align:right;\'});\n	labels = [\'")
STDOUT(str(pagefn.BUTTONLABELS['alertWindow']['ok']))
STDOUT("\', ];\n	[\'ok\',].each(function(actionType,index){\n	    // create buttons\n	    options = {\n		txt: labels[index],\n		imgType: actionType,\n		bnAttrs: {\'style\':\'margin-right:1em;\'}\n		//bnSkin: \'sexycadet\'\n	    };			\n	    button = MUI.styledButton(options);\n	    button.addEvent(\'click\', function(e){		\n		new Event(e).stop();						\n		// close confirm window\n		aWindow.close();\n	    });\n	    buttons.grab(button);\n	});		\n	container = new Element(\'div\');\n	container.adopt(messageEl, hr, buttons);			\n	// add content to this window\n	MUI.updateContent({\n	    \'element\': aWindow.windowEl,\n	    \'content\': container,\n	    \'method\': \'html\',\n	    \'onContentLoaded\': null,\n	    \'require\': {}			\n	});\n    },\n    // Return a custom defined notification crawler\n    crawler: function(message, options){\n	var defaultOptions = {\n	    loadMethod: \'html\',\n	    closeAfter: 1500,\n	    type: \'notification\',\n	    addClass: \'notification\',\n	    content: message,\n	    width: 220,\n	    height: 60,\n	    //y: 53,\n	    y: 280,\n	    x: 700,\n	    padding:  { top: 10, right: 12, bottom: 10, left: 12 },\n	    shadowBlur: 5	\n	};\n	$H(options).each(function(value,key){\n	    defaultOptions[key] = value;\n	});\n	new MUI.Window(defaultOptions);		\n    },\n    /**************************************************************************************************\n    A \'gauge\' style MUI.Window\n    Removed the cycle background which will be drawn in MUI.Window.drawGauge function.\n    ***************************************************************************************************/\n    GaugeWindow: new Class({\n	Implements: MUI.Window,\n	drawGauge: function(ctx, width, height, shadowBlur, shadowOffset, shadows){\n	    // Draw gauge header\n	    this.canvasHeaderEl.setStyles({\n		\'top\': shadowBlur - shadowOffset.y,\n		\'left\': shadowBlur - shadowOffset.x\n	    });		\n	    var ctx = this.canvasHeaderEl.getContext(\'2d\');\n	    ctx.clearRect(0, 0, width, 100);\n	    ctx.beginPath();\n	    ctx.lineWidth = 24;\n	    ctx.lineCap = \'round\';\n	    ctx.moveTo(13, 13);\n	    ctx.lineTo(width - (shadowBlur*2) - 13, 13);\n	    ctx.strokeStyle = \'rgba(0, 0, 0, .65)\';\n	    ctx.stroke();\n	}\n    })\n});\n/*****************************************************************************\nImplement some new properties to MUI.Panel\n******************************************************************************/\nMUI.Panel.implement({\n    // toggle the panel\'s expanding status, new added by B.Z \n    toggleExpand: function(){\n	var panel = this.panelEl;\n	var panelWrapper = this.panelWrapperEl\n	// Get siblings and make sure they are not all collapsed.\n	// If they are all collapsed and the current panel is collapsing\n	// Then collapse the column.\n	var instances = MUI.Panels.instances;\n	var expandedSiblings = [];\n	panelWrapper.getAllPrevious(\'.panelWrapper\').each(function(sibling){\n	    var instance = instances.get(sibling.getElement(\'.panel\').id);\n	    if (instance.isCollapsed == false){\n		expandedSiblings.push(sibling.getElement(\'.panel\').id);\n	    }\n	});\n	panelWrapper.getAllNext(\'.panelWrapper\').each(function(sibling){\n	    var instance = instances.get(sibling.getElement(\'.panel\').id);\n	    if (instance.isCollapsed == false){\n		expandedSiblings.push(sibling.getElement(\'.panel\').id);\n	    }\n	});\n	// Collapse Panel\n	if (this.isCollapsed == false) {\n	    //var currentColumn = MUI.Columns.instances.get($(options.column).id);\n	    var currentColumn = MUI.Columns.instances.get($(this.options.column).id);\n	    if (expandedSiblings.length == 0 && currentColumn.options.placement != \'main\'){\n		//var currentColumn = MUI.Columns.instances.get($(options.column).id);\n		var currentColumn = MUI.Columns.instances.get($(this.options.column).id);\n		currentColumn.columnToggle();\n		return;\n	    }\n	    else if (expandedSiblings.length == 0 && currentColumn.options.placement == \'main\'){\n		return;\n	    }\n	    this.oldHeight = panel.getStyle(\'height\').toInt();\n	    if (this.oldHeight < 10) this.oldHeight = 20;\n	    this.contentEl.setStyle(\'position\', \'absolute\'); // This is so IE6 and IE7 will collapse the panel all the way		\n	    panel.setStyle(\'height\', 0);								\n	    this.isCollapsed = true;				\n	    panelWrapper.addClass(\'collapsed\');\n	    panelWrapper.removeClass(\'expanded\');				\n	    //MUI.panelHeight(options.column, panel, \'collapsing\');\n	    MUI.panelHeight(this.options.column, panel, \'collapsing\');\n	    MUI.panelHeight(); // Run this a second time for panels within panels\n	    this.collapseToggleEl.removeClass(\'panel-collapsed\');				\n	    this.collapseToggleEl.addClass(\'panel-expand\');\n	    this.collapseToggleEl.setProperty(\'title\',\'Expand Panel\');\n	    this.fireEvent(\'onCollapse\');				\n	}\n	else {	// Expand Panel\n	    this.contentEl.setStyle(\'position\', null); // This is so IE6 and IE7 will collapse the panel all the way				\n	    panel.setStyle(\'height\', this.oldHeight);\n	    this.isCollapsed = false;				\n	    panelWrapper.addClass(\'expanded\');\n	    panelWrapper.removeClass(\'collapsed\');\n	    MUI.panelHeight(this.options.column, panel, \'expanding\');\n	    MUI.panelHeight(); // Run this a second time for panels within panels\n	    this.collapseToggleEl.removeClass(\'panel-expand\');\n	    this.collapseToggleEl.addClass(\'panel-collapsed\');\n	    this.collapseToggleEl.setProperty(\'title\',\'Collapse Panel\');\n	    this.fireEvent(\'onExpand\');\n	};\n    }\n});\n")

