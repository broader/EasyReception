<h1><%= chapter %>. Karrigell Services</h1>

<h3><%= chapter %>.1 Definition</h3>

<p>"Karrigell Services" are Python scripts which can handle several URLs, so that
a complete service with different HTML pages can be created with just one script.
<b>They are the most recommended way of writing scripts with Karrigell</b>, for
ease of programming (access to user value is more straightforward) and maintenance
(the logic of the whole application is defined in one script)

<p>To achieve this, each function defined at the module level in a Karrigell service 
matches a URL : the function <code>foo()</code> in the script <code>dummy.ks</code> 
is called by the URL <span class="url">dummy.ks/foo</span>

<p>This makes passing values from one page to another very straightforward : if
a page has a link like

<div><pre class="verbatim">&lt;A HREF="script.ks/foo?bar=99"&gt;</pre></div>
<p>the script will handle the value by defining is as it argument :

<div class="python"><pre>def foo(bar):
    print bar
</pre></div>

<p>Form values are handled in a similar way :

<p>
<div><pre class="verbatim">&lt;FORM ACTION="script.ks/foo"&gt;
&lt;INPUT NAME="bar"&gt;
&lt;INPUT TYPE="submit" VALUE="Ok"&gt;
</pre></div>

<p>The same script as above will manage the value entered by the user :
<p>
<div class="python"><pre>def foo(bar):
    print bar
</pre></div>

<p>The names defined as arguments to the function must be the same as
those defined in the link or the form ; the function can also use default values
like in ordinary Python scripts, in case no value was sent by the browser :

<p>
<div class="python"><pre>def foo(arg1,arg2=None):
    print "First argument",arg1
    if arg2 is not None:
    	print "Second argument",arg2
</pre></div>


<p>If no function is specified, Karrigell searches for a function called 
<code>index()</code> with no argument

<p>Note that for security and readability reasons, only the functions explicitely 
defined in the ks script, and whose definition starts at the column 0 in the source 
code, can be called

<h3><%= chapter %>.2 Building applications</h3>

<p>To "jump" from one function to another, just specify the function name in a link or 
a form action :

<p>
<div class="python">
<pre class="verbatim">
def index():
   print '&lt;a href="foo?name=bar"&gt;go to foo&lt;/a&gt;'

def foo(name):
   print '&lt;IMG SRC="../picture.jpg"&gt;'
   print name
</pre>
</div>

<p>Notice the first line in the <code>foo()</code> function : because of URL resolution 
methods, the relative URL for files or scripts in the <b>same</b> directory as a ks script 
must be prefixed by "../"

<p>All the HTTP environment, custom exceptions, functions for authentication,
session handling etc. are the same as in Python scripts

<h3><%= chapter %>.3 "Private" functions</h3>

<p>If you need to define functions inside the script but don't want them to be
called by a url, prefix them by an underscore (_)

<p>
<div class="python">
<pre class="verbatim">
def _private(value):
   """Private function - can't be called from the outside"""
   return value+1

</pre>
</div>

<h3><%= chapter %>.4 Example</h3>

<p>Here is an example of a simple Karrigell Service, using session management
and HTTP redirection :

<p>
<div class="python">
<pre class="verbatim">
so = Session()
if not hasattr(so, 'x'):
    so.x = 0

def index():
    print "x = %s" %so.x
    print '&lt;br&gt;&lt;a href="increment"&gt;Increment&lt;/a&gt;'
    print '&lt;br&gt;&lt;a href="decrement"&gt;Decrement&lt;/a&gt;'
    print '&lt;br&gt;&lt;a href="reset"&gt;Reset&lt;/a&gt;'
    
def increment():
    so.x = _private(so.x)
    raise HTTP_REDIRECTION,"index"

def decrement():
    so.x -= 1
    raise HTTP_REDIRECTION,"index"

def reset():
    so.x = 0
    raise HTTP_REDIRECTION,"index"

def _private(x):
    """The function name begins with _ : internal function, 
    can't be call by a url"""
    return x+1

</pre>
</div>