<h1><%= chapter %>. HTMLTags - generate HTML in Python</h1>

<h3><%= chapter %>.1 Overview</h3>

<p>The HTMLTags module defines a class for all the valid HTML tags, written in 
uppercase letters. To create a piece of HTML, the general syntax is :

<p>
<span class="python">
      t = TAG(content, key1=val1,key2=val2,...)
</span>

<p>so that <code>print t</code> results in :

<p>
<span class="browser">
&lt;TAG key1="val1" key2="val2" ...>content&lt;/TAG>
</span>

<p>For instance :

<p><span class="python">
print A('bar', href="foo")</span>
&nbsp;&nbsp;==>
<span class="browser">&lt;A href="foo">bar&lt;/A>
</span>

<p>Attributes with the same name as Python keywords (<code>class</code>,
<code>type</code>) must be capitalized :

<p><span class="python">print DIV('bar', Class="title")</span>
&nbsp;&nbsp;==>
<span class="browser">&lt;DIV Class="title">bar&lt;/A>
</span>

<p>To generate HTML attributes without value, give them the value 
<code>True</code> :

<p><span class="python">print OPTION('foo',SELECTED=True,value=5)</span>
&nbsp;&nbsp;==>
<span class="browser">&lt;OPTION value="5" SELECTED></span>

<p>For non-closing tags such as &lt;IMG&gt; or &lt;BR&gt;, the <code>print</code>
statement does not generate the closing tag

<h3><%= chapter %>.2 Tags concatenation</h3>

<p>To add a "brother" to a tag (an element at the same level in the tree) use the addition operator :

<p>
<span class="python">print B('bar')+INPUT(name="bar")</span>
&nbsp;&nbsp;==>
<span class="browser">&lt;B>bar&lt;/B>&lt;INPUT name="bar"></span>

<p>You can also repeat an instance using the multiplication operator :
<p>
<span class="python">print TH('&amp;nbsp')*3</span>
&nbsp;&nbsp;==>
<span class="browser">&lt;TD>&amp;nbsp;&lt;/TD>&lt;TD>&amp;nbsp;&lt;/TD>&lt;TD>&amp;nbsp;&lt;/TD>
</span>

<p>If you have a list of instances, you can concatenate the items with the function <code>Sum()</code> :

<p>
<span class="python">
Sum([ (I(i)+':'+B(i*i)+BR()) for i in range(100) ])
</span>

<p>generates the rows of a table showing the squares of integers from 0 to 99

<h3><%= chapter %>.3 Building an HTML document</h3>

<p>An HTML document is a tree of elements ; HTMLTags provides a simple way of building this tree

<p>The <em>content</em> argument can be an instance of an HTMLTags class, so that you 
can nest tags, like this :

<p>
<span class="python">print B(I('foo'))</span>
&nbsp;&nbsp;==>
<span class="browser">&lt;B&gt;&lt;I&gt;foo&lt;/I&gt;&lt;/B&gt;</span>

<p>If you think of the document as a tree, this means that the instance I('foo') is a child of the instance of class <code>B</code>

<p>If you have to build a more complex tree, using this approach means that you will have to be careful about the opening and closing brackets, the code will rapidly become difficult to read and maintain. It also means that you build the tree "bottom-up"

<p>An alternative is to build the tree "top-down" : build the nesting element first, then add the children. HTMLTags uses the operator <code>&lt;=</code> as a synonym of "add child"

<p>You can compare the 2 approaches with this example :
<p>
<ul>
<li>"bottom-up"
<p><div class="python">
# build lines first
<br>lines = INPUT(name="zone1",value=kw.get("zone1",""))
<br>lines += BR()+INPUT(name="zone2",value=kw.get("zone2",""))
<br>lines += BR()+INPUT(Type="submit",value="Ok")
<br># build and print form
<br>print FORM(lines,action="validate",method="post")
</div>

<p>
<li>"top-down"
<p><div class="python">
# build form first
<br>form = FORM(action="validate",method="post") 
<br># add child elements
<br>form <= INPUT(name="zone1",value=kw.get("zone1","")) 
<br>form <= BR()+INPUT(name="zone2",value=kw.get("zone2","")) 
<br>form <= BR()+INPUT(Type="submit",value="Ok") 
<br>print form
</div>
</ul>

<p>To build a complex document, the top-down approach is probably more readable 

<p>
<pre class="python">
head = HEAD()
head <= LINK(rel="Stylesheet",href="doc.css")
head <= TITLE('Record collection')+stylesheet
&nbsp;
body = BODY()
body <= H1('My record collection')
&nbsp;
table = TABLE(Class="content")
table <= TR(TH('Title')+TH('Artist'))
for rec in records:
    table <= TR(TD(rec.title,Class="title")+TD(rec.artist,Class="Artist")
&nbsp;
body <= table
&nbsp;
print HTML(head+body)
</pre>
<p>
<h3><%= chapter %>.4 Inspecting the document tree</h3>

<p>Tags have 2 methods to find the elements that match certain conditions :
<ul>
<li><code>get_by_tag(<i>tag_name</i>)</code> : returns the list of the elements with the specified tag name
<li><code>get_by_attr(<i>arg1=val1,arg2=val2...</i>)</code> : returns the list of the elements whose attributes match the specified condition
</ul>

<p>For instance, if you have built a table and want to present odd and even rows in different styles, you can use <code>get_by_tag()</code> and change the attribute "Class" of the <code>TD</code> tags this way :

<p>
<pre class="python">
classes = ['row_even','row_odd']
lines = table.get_by_tag('TR')
for i,line in enumerate(lines):
    cells = line.get_by_tag('TD')
    for cell in cells:
        cell.attrs['Class'] = classes[i%2]
</pre>

<p>

<h3><%= chapter %>.5 SELECT tags, checkboxes and radiobuttons</h3>

<p>When building an HTML document, there is often a set of data (the result of a request to a database for instance) that should be presented to the end-user as a list of options in a SELECT tag, or as a list of radiobuttons or checkboxes. Generally, one or several of the options is selected or checked because it matches a certain condition

<p>HTMLTags provides special methods for the SELECT tag to initialize it from the set of data, and to mark one or several options are selected :

<ul>
<li><code>from_list(<i>data</i>)</code> : returns the SELECT tag with OPTION tags taken from the list <i>data</i>. Each OPTION tag has the item value as content and the item rank in the list as value :

<p>
<span class="python">s = SELECT().from_list(["foo","bar"])
</span>
&nbsp;&nbsp;==>
<div class="browser">&lt;SELECT>
<br>&lt;OPTION value="0">foo
<br>&lt;OPTION value="1">bar
<br>&lt;/SELECT>
</div>

<li><code>select(content=<i>item</i>)</code> or <code>select(value=<i>item</i>)</code> : mark the options with the specified content or value as selected, and the other options as not selected. <i>item</i> can be a list of contents or values, for SELECT tags with the MULTIPLE option set

<p>
<span class="python">s.select(content="bar")
</span>
&nbsp;&nbsp;==>
<div class="browser">&lt;SELECT>
<br>&lt;OPTION value="0">foo
<br>&lt;OPTION value="1" SELECTED>bar
<br>&lt;/SELECT>
</div>

</ul>

<p>For checkboxes and radiobuttons, HTMLTags provides 2 classes, <code>CHECKBOX</code> and <code>RADIO</code>. Instances of both classes are initialized with a list as the first argument, and attributes of the INPUT tags as other keyword arguments :

<p>
<span class="python">radio = RADIO(["foo","bar"],Class="menu")
</span>

<p>Iterating on the RADIO instance yields tuples <code><i>(content,tag)</i></code>&nbsp; where <i>content</i> is the item in the original list :

<p>
<pre class="python">for (content,tag) in radio:
    print content,tag
</pre>
&nbsp;&nbsp;==>
<p>
<div class="browser">
foo&lt;INPUT Type="radio" Class="menu" value="0">
<br>bar&lt;INPUT Type="radio" Class="menu" value="1">
</div>
<p>When the instance is created, all the INPUT tags are unchecked. The method <code>check(content=<i>item</i>)</code> or <code>check(value=<i>item</i>)</code> is used to check the INPUT tags with the specified content or value

<p>
<pre class="python">radio.check(content="foo")
table = TABLE()
for (content,tag) in radio:
    table <= TR(TD(content)+TD(tag))
print table
</pre>
&nbsp;&nbsp;==>
<p>
<pre class="browser">
&lt;TABLE&gt;
&lt;TR&gt;
&lt;TD&gt;foo&lt;/TD&gt;
&lt;TD&gt;&lt;INPUT Type="radio" Class="menu" value="0"&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;bar&lt;/TD&gt;
&lt;TD&gt;&lt;INPUT Type="radio" Class="menu" value="1"&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;
</pre>

<p>As for <code>SELECT</code>, <i>item</i> can be a list of contents or values, in case several checkboxes must be checked

<h3><%= chapter %>.6 Unicode</h3>

<p>Tags content and attribute values can be bytestrings or Unicode strings. When a tag is printed, Unicode strings are encoded to bytestrings. The encoding used can be defined by the function <code>set_encoding(<i>encoding</i>)</code>
<p>If you don't specify an encoding, the system default encoding (<code>sys.getdefaultencoding()</code>) is used
<p>Inside a Karrigell script, the encoding defined by <code>SET_UNICODE_OUT()</code> is also used by HTMLTags - you don't have to use <code>set_encoding()</code>

</pre>