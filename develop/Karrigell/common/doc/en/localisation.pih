<html>
<head>
<title>Internationalization</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="STYLESHEET" href="lib.css">
<style type="text/css">
<!--
dl {  background-color: #FFFFCC; border-width: 1; border-style:solid;}
-->
</style></head>

<body>
<h1><%= chapter %>. Localisation and Unicode</h1>
<p>As you'll have guessed by reading this documentation, I'm not from an 
English-speaking country (I'm French, and more precisely Breton - the name 
Karrigell is a Breton word). So I've included a program to facilitate 
localization of scripts

<h2><%= chapter %>.1 Translation</h2>

<p>In a script, every time you want a message translated into a given 
language, instead of writing it as a normal string with quotes, 
it's written using a function called _, this way :

<div class="verbatim"><pre class="verbatim">
print _("Hello everybody")
</pre></div>

<p>In Python Inside HTML (PIH) you can use the shortcut &lt;%_ &gt; :

<div class="verbatim"><pre class="verbatim">
&lt;%_ "Hello everybody" %&gt;
</pre></div>

<p>The <%= make_link("administration menu","admin") %> provides a simple web 
interface to create and modify translations of strings

<h2><%= chapter %>.2 Unicode support</h2>

<p>Unicode is a normalized standard used to represent all the writing styles in 
the world. For each sign (a letter in any alphabet, an ideogram in an Asiatic 
language) Unicode defines a unique number, called a "code point". Since 
computers and networks can only manage bytes, a mapping between "code points" 
and one or several bytes must be defined ; these mappings are called "encodings"

<p>Because there are many different encodings, when a program has to print a 
sign (a greek letter, a math symbol, a Chinese sign) it must receive <b>two</b> 
pieces of information : the string representing the sign (a sequence of bytes) 
<b>and</b> the encoding used. If it receives only a string, the program can try 
to guess an encoding (this is what a web browser usually does) but with no 
guarantee of success

<p>Karrigell defines two parameters in the configuration file to handle Unicode :
<ul>
<li><CODE>encode_input</CODE> : if set to <CODE>True</CODE>, Karrigell tries to transform form
data into Unicode strings, trying different encodings one after the other. More
precisely, if the received data only have ASCII characters, no conversion is made,
the string is kept as is ; otherwise several encodings are tried and the first one
that succeeds is used
<br>So, the form data available in QUERY are either bytestrings or Unicode strings
<br><CODE>encode_input</CODE> defaults to <CODE>False</CODE> : no Unicode conversion is made

<li><CODE>output_encoding</CODE> : defines the encoding that the browser will use
to interprete the strings that it's asked to print. The default value is 
<CODE>None</CODE>, meaning that no encoding is done : the strings are sent . You can define another encoding by
setting <code>output_encoding</code> in section <CODE>[Server]</CODE> of the 
configuration file to another value

<p>You can see examples in the demo/unicode directory : set output_encoding to 
utf-8 to see the expected result
</ul>

<hr align="left" width="10%">
<a name="note1">(1) On Microsoft Internet Explorer the language preference is 
set by Tools/Internet Options/General/Languages ; accepted languages are 
chosen from a list and ordered by preference. On Firefox use 
Edition/Preferences/Languages

</body>
</html>
