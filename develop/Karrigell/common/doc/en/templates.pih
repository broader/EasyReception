<h1><%= chapter %>. Integration of templating engines</h1>

<p>For those who are familiar with templating engines, Karrigell makes their integration
very straightforward. Three engines are available though built-in functions, the others can
be used like in normal Python scripts

<h3><%= chapter %>.1 Python string substitution</h3>

<p><i><b>WARNING:</b> PythonStringSubst has been superceded by KT, and will be
dropped from the next release of Karrigell</i>

<p>This templating system uses the string substitution syntax that was introduced in 
Python 2.4. Template files use placeholders of the form <code>$foo</code>

<p>To use it in scripts, use the built-in function 
<code>PythonStringSubst(url,arg1=val1,arg2=val2...)</code> :
it will get the source string from the file at the specified url, and apply the keyword
arguments to this source string

<p>For instance, suppose the template source is 

<div class="verbatim">
<pre>
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;$title&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
$contents
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
</div>

The result of 
<p>
<div class="python">
<pre>
print PythonStringSubst(src_url,
    title='Python String Substitution', contents='Hello World example'
    )
</div>

<p>will be :
<p>
<div class="browser">
<pre>
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Python String Substitution&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
Hello World example
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
</div>
<p>
<h3><%= chapter %>.2 KT - Karrigell Templates</h3>

<p>The built-in KT function supercedes PythonStringSubst. In addition to string substitution, 
KT provides a mechanism for including other templates and specifying translations strings, 
which are passed to the Karrigell translation engine. KT is fully documented in 
<%= make_link("this page","kt") %>

<p>KT templates are stored in text files with <code>.kt</code> extension. Conversion of existing 
PythonStringSubst templates is easy:
<ol>
<li>Change the extension of existing PythonStringSubst template files to <code>.kt</code></li>
<li>Replace <code>"PythonStringSubst"</code> with <code>"KT"</code> in Python and ks scripts.</li>
</ol>

<h3><%= chapter %>.3 Cheetah</h3>

<p>If the Cheetah templating engine is available, you can use it the same way as 
above, with a built-in function <code>Cheetah(url,arg1=val1,arg2=val2...)</code>.
<code>url</code> is the template url, and the keyword arguments are used to produce
the resulting HTML code

<h3><%= chapter %>.4 Other engines</h3>

<p>To use another engine, you must apply its syntax in the script. Though the
implementation details may vary, your code will probably look like this :
<p>
<div class="python">
<pre>
import Template # or raise Exception
# get template source from file
templateDef = open(template_file_name).read()
# apply keywords to the template definition and print the result
print Template(templateDef,arg1=val1,arg2=val2, ...)
</pre>
</div>