<h1><%= chapter %>. Apache integration</h1>

<p>There are several ways to run Karrigell with Apache :
<TABLE border="1">
<tr><th>mode</th><th>description</th><th>pros</th><th>cons</th></tr>

<tr>
<td>CGI mode</td>
<td>Requests are processed by a CGI script</td>
<td>
  <ul>
  <li>compatible with all web hosting providers
  <li>doesn't block with long-running requests (each request runs in a different
  process)
  </ul>
</td>
<td>
  <ul>
  <li>the CGI overhead reduces performance
  </ul>
</td>
</tr>

<tr>
<td>WSGI mode</td>
<td>Communication between Apache and Karrigell uses the WSGI standard
and relies on the Apache module mod_wsgi</td>
<td>
  <ul>
  <li>good performance
  <li>WSGI is the de facto standard for framework integration
  </ul>
</td>
<td>
  <ul>
  <li>requires the mod_wsgi module (not available on many shared hosting services)
  </ul>
</td>
</tr>

<tr>
<td>mod_python mode</td>
<td>mod_python embeds a Python interpreter in  the Apache server</td>
<td>
  <ul>
  <li>good performance (no CGI overhead)
  </ul>
</td>
<td>
  <ul>
  <li>requires installation of the mod_python module (not available on all
  shared web hosting solutions)
  </ul>
</td>
</tr>

<tr>
<td>Proxy mode</td>
<td>The integrated web server runs in the background, the Apache server 
sends all requests to it and returns the response to the client</td>
<td>
  <ul>
  <li>good performance
  <li>session object can be managed in memory (more flexible)
  </ul>
</td>
<td>
  <ul>
  <li>requires permission to run a long-running process on the server
  </ul>
</td>
</tr>



</table>

</ul>

<h2><%= chapter %>.1 Overview</h2> 

<p>To run Karrigell behind Apache, some options will be defined in the 
<span class="file">httpd.conf</span> configuration file : the server port, the
Document Root for the host, and directives that apply to the Document Root content.
To simplify installation, the only required directive is <code>AllowOverride All</code>,
which tells the server to apply the directives in <span class="file">.htaccess</span>
files : a model of these files is provided in the Karrigell distribution

<p>This means that the section <code>&lt;Directory&gt;</code> relative to your
Document Root in <span class="file">httpd.conf</span> should be like this :

<p>
<div class="verbatim">
<pre class="conf">
&lt;Directory <B>[[document_root]]</B>&gt;
    AllowOverride All
    Order allow,deny
    Allow from all
&lt;/Directory &gt;
</pre>
</div>

<p>Karrigell will only manage one host (virtual hosts are managed by Apache), which 
simplifies the configuration options

<h2><%= chapter %>.2 CGI mode</h2>

<p>This mode uses the Apache modules <CODE>mod_rewrite</CODE> and <CODE>mod_cgi</CODE> ;
all the urls that must be managed by Karrigell (everything except one of the static file 
extensions <span class="file">html, htm, css, js, jpg, jpeg, gif, png</span>) are
"rewritten" by <CODE>mod_rewrite</CODE> to be processed by a single cgi script, 
<code>k_handler.cgi</code>, located by default in the folder 
<code>karrigell/apache/cgi-bin</code>. This script takes Karrigell configuration 
options from the configuration script <span class="file">conf.py</span>

<p>These modules must be loaded at Apache startup, so make sure that these lines
are uncommented in your <span class="file">httpd.conf</span> file :

<div class="verbatim">
<pre>LoadModule cgi_module modules/mod_cgi.so
LoadModule rewrite_module modules/mod_rewrite.so</pre>
</div>

<p>The next step is to install or upload the content of <span class="file">
Karrigell-Apache-<%= version %>.tar.gz</span> in the Document Root of your Apache space

<p>Then rename the file <span class="file">.htaccess_cgi</span> in this Document Root
to <span class="file">.htaccess</span>

<p>You must also edit the first line of the CGI script <code>k_handler.cgi</code>
with the appropriate command to start the Python interpreter. On Unix/Linux
it is usually <code>#!/usr/bin/python</code> and on Windows <code>#!python</code>,
but this might depend on the server configuration

<p>In the best case, this is enough to get Karrigell running ! You will have
to set write and execution mode in some folders : write for <span class="file">
apache/data</span>, execution for <span class="file">apache/cgi-bin</span>. 
The exact mode will slightly depend on the server

<p>In other cases (for instance in a shared web hosting situation) you will not
be able to run CGI scripts outside of a specific folder. In this case :
<p>
<ul>
<li>put all the files in the <span class="file">apache/cgi-bin</span> directory
in this CGI folder<br>
<li>edit the script <span class="file">conf.py</span> and replace theses values :
  <ul>
  <li>root_dir = (the Document Root full path)
  <li>karrigell_dir = os.path.join(root_dir,"karrigell")
  <li>server_dir = (the full path of the directory where you put cgi-bin)
  <li>data_dir = the full path of a directory with WRITE mode enabled, if possible 
  outside of the Document Root for security reasons
  <li>cache_dir = os.path.join(data_dir, "cache")
  </ul>
<li>in the <span class="file">.htaccess</span> file in the Document Root, edit
the url of the script <span class="file">k_handler.cgi</span> with the correct
value. Usually Apache is
configured with a <code>ScriptAlias</code> directive saying that scripts that
reside in the CGI folder are called with the url <code>cgi-bin</code> ; in this
case you would set the value <span class="file">/cgi-bin/k_handler.cgi</span>
in <span class="file">.htaccess</span>
</ul>

<p>If you don't know the full paths, you can run the CGI script <span class="file">
cgi_dir.cgi</span> which will give you the full path of the CGI folder ; you should be
able to deduce the other paths from it

<h2><%= chapter %>.3 Integration with mod_wsgi</h2>

mod_wsgi is a module which enables Apache to host any Python application which supports the Python WSGI interface

<p>The script <span class="file">wsgi.py</span> in folder 
<span class="file">apache/mod_wsgi</span> handles all the urls that must be managed by 
Karrigell

<p>mod_wsgi must be enabled by the Apache server. To do this, the first 
thing to do is download and install mod_python from the 
<a href="http://code.google.com/p/modwsgi/">website</a>, and follow the instructions to
enable it in the Apache configuration file. In the "Dynamic Shared Object (DSO) 
Support" section of <span class="file">httpd.conf</span>, add the line :

<div class="verbatim">
<pre>LoadModule wsgi_module modules/mod_wsgi.so</pre>
</div>

<p>Install or upload the content of <span class="file">
Karrigell-Apache-<%= version %>.tar.gz</span> in the Document Root of your Apache space

<p>If you have a file <span class="file">.htaccess</span> in this Document Root, 
delete it or give it another name

<p>Then in <span class="file">httpd.conf</span>, add this line :

<div class="verbatim">
<pre>WSGIScriptAlias / /path-to-Karrigell-root/karrigell/apache/mod_wsgi/wsgi.py
</div>

<p>This will direct all the requests to the script <span class="file">wsgi.py</span>, which manages all requests using Karrigell and returns the result to the Apache server

<h2><%= chapter %>.4 Integration with mod_python</h2>

Mod_python is an Apache module that embeds the Python interpreter within the server. It
avoids the CGI overhead of starting the interpreter for each requests and thus provides 
much better performance

<p>The script <span class="file">mod_python_handler.py</span> in folder 
<span class="file">apache/mod_python</span> handles all the urls that must be managed by 
Karrigell

<p>Of course mod_python must be enabled by the Apache server. To do this, the first 
thing to do is download and install mod_python from the 
<a href="http://www.modpython.org/">website</a>, and follow the instructions to
enable it in the Apache configuration file. In the "Dynamic Shared Object (DSO) 
Support" section of <span class="file">httpd.conf</span>, add the line :

<div class="verbatim">
<pre>LoadModule python_module modules/mod_python.so</pre>
</div>

<p>Install or upload the content of <span class="file">
Karrigell-Apache-<%= version %>.tar.gz</span> in the Document Root of your Apache space

<p>Then rename the file <span class="file">.htaccess_mod_python</span> in 
this Document Root to <span class="file">.htaccess</span>

<p>This is enough to get Karrigell running. For security reasons, it is better
to edit the configuration script <span class="file">conf.py</span> and replace 
the value <code>data_dir</code> by the full path of a directory with WRITE mode 
enabled, outside of the Document Root