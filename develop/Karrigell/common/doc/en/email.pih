<h1><%= chapter %>. Sending e-mail</h1>


<h2><%= chapter %>.1 SendMail()</h2>
Karrigell provides a class, <code>SendMail()</code>, allowing programmer to easily send e-mails.<br>
<br>
<code>SendMail()</code> use is :<br>
<code>
import k_email<br>
msg = k_email.SendMail(u"Subject of this message", 'smtp.server.com')
</code>
<br>
<br>
<br>
<code>SendMail()</code> parameters are :
<ul>
<li><code>subject    </code> : Title of the message.
<li><code>smtp_server</code> : SMTP server address used for sending the message.
</ul>
<br>


<h2><%= chapter %>.2 set_from()</h2>
Method <code>set_from()</code>, sets the "from" field of the message.<br>
<br>
<code>set_from()</code> use is :<br>
<code>
msg.set_from("Pierre", "pierre.quentel@wanadoo.fr")</code>
<br>
<br>
<br>
<code>set_from()</code> parameters are :
<ul>
<li><code>name   </code> : Name in clear form. If you don't want to give a name, name must be an empty string.
<li><code>address</code> : e-mail address (used for reply if no "reply to" field specified)
</ul>
<br>


<h2><%= chapter %>.3 set_reply_to()</h2>
Method <code>set_reply_to()</code>, sets the "reply to" field of the message.<br>
<br>
<code>set_reply_to()</code> use is :<br>
<code>
msg.set_reply_to("Pierre", "pierre.quentel@wanadoo.fr")</code>
<br>
<br>
<br>
<code>set_reply_to()</code> parameters are :
<ul>
<li><code>name   </code> : Name in clear form. If you don't want to give a name, name must be an empty string.
<li><code>address</code> : e-mail address used for reply.
</ul>

If no "reply to" field is specified, the "from" address willl be used for the reply.
<br>
<br>


<h2><%= chapter %>.4 set_message()</h2>
Method <code>set_message()</code>, sets the content of the mesage.<br>
<br>
<code>set_message()</code> use is :<br>
<code>
msg.set_message("Content of the message.")</code>
<br>
<br>
<br>
<code>set_message()</code> parameter is :
<ul>
<li><code>text</code> : Content of the message.
</ul>
<br>


<h2><%= chapter %>.5 add_recipient()</h2>
Method <code>add_recipient()</code>, adds a recipient.<br>
<br>
<code>add_recipient()</code> use are :<br>
<code>
msg.add_recipient("Paul", "Paul@wanadoo.fr")<br>
msg.add_recipient("Paulette", "Paulette@wanado.fr", cc=True)</code>
<br>
<br>
<br>
<code>add_recipient()</code> parameters are :
<ul>
<li><code>name</code> : Name of the recipient in clear form. If you don't want to give a name, name must be an empty string.
<li><code>address</code> : e-mail address of the recipient.
<li><code>add_to_header</code> : If True, name and address are added to the "to" list of recipients (default value = True).
<li><code>add_to_smtp</code> : If True, address is added to smtp recipient list (default value = True).
<li><code>cc</code> : If True, name and address are added to the "cc" list of recipients (default value = False).
</ul>
Only addresses added to smtp recipient list will receive the message.<br>
This allows you to send messages to a list without reveiling the effective recipients :<br>
<code>
msg.add_recipient("My mailing list", '', True, False)    # Add name of recipient (shown in e-mailer)<br>
msg.add_recipient("", "Paul@wanado.fr", False, True)     # Add address to smtp recipient list (not shown is e-mailer)<br>
msg.add_recipient("", "Paulette@wanado.fr", False, True) # Add address to smtp recipient list (not shown is e-mailer)<br>
msg.add_recipient("", "Paulo@wanado.fr", False, True)    # Add address to smtp recipient list (not shown is e-mailer)</code>
<br>
<br>


<h2><%= chapter %>.6 add_attachment()</h2>
Method <code>add_attachment()</code>, adds an attached file to the message.<br>
<br>
<code>add_attachment()</code> use is :<br>
<code>
msg.add_attachment("My file.pdf")</code>
<br>
<br>
<br>
<code>add_attachment()</code> parameter is :
<ul>
<li><code>fileName</code> : Name of the file to add.
</ul>
<br>

<h2><%= chapter %>.7 set_smtp_username_and_password()</h2>
Method <code>set_smtp_username_and_password()</code>, sets the login and password of SMTP server.<br>
<br>
<code>set_smtp_username_and_password()</code> use is :<br>
<code>
msg.set_smtp_username_and_password("my_name", "my_password)</code>
<br>
<br>
<br>
<code>set_smtp_username_and_password()</code> parameters are :
<ul>
<li><code>smtp_user_name</code> : User name for SMTP server login.
<li><code>smtp_password</code> : Password associated with user name.
</ul>
Call to this method is not mandatory. You have to call <code>set_smtp_username_and_password()<code> only
when the SMTP server you use requests authentication.
<br>
<br>



<h2><%= chapter %>.8 send()</h2>
Method <code>send()</code>, sends the message to all recipients that are in smtp recipient list.<br>
<br>
<code>send()</code> use is :<br>
<code>
msg.send()</code>
<br>
<br>

<h2><%= chapter %>.9 Miscellaneous</h2>
Here is a list of other methods that can be usefull :

<ul>
<li><code>set_subject()</code> : Replaces the title of the message.
<li><code>message_prepend()</code> : Adds text to the beginning of the message.
<li><code>message_append()</code> : Adds text to the end of the message.
<li><code>message_prepend_file()</code> : Adds content of a text file to the beginning of the message.
<li><code>message_append_file()</code> : Adds content of a text file to the end of the message.
<li><code>clear_recipients()</code> : Clears recipient list.
<li><code>clear_attachments()</code> : Clears attachment list.
<li><code>set_smtp_server()</code> : Replaces smtp server address.
</ul>
<br>


<h2><%= chapter %>.10 Examples</h2>

<p>
<p>In the following example, a message is sent to 4 recipients. One recipient is in the 'cc' list. 
Another recipient has no 'name', only its address is known. 2 files are attached to the message.

<pre class="verbatim">
import k_email

msg = k_email.SendMail(u"Subject of this message", 'smtp.server.com')
msg.set_from (u"Karrigell WEB site", '')
msg.set_message('Hello message')
msg.set_reply_to(u"karrigell group", 'karrigell@googlegroups.com') # Not mandatory
msg.add_recipient(u'recipient 1', 'recipient1@server1.com')
msg.add_recipient(u'recipient 2', 'recipient2@server2.com')
msg.add_recipient(u'', 'recipient3@server3.com')
msg.add_recipient(u'recipient 4', 'recipient4@server4.com', cc=True) # Not mandatory
msg.add_attachment ("ASCII characters.pdf") # Not mandatory
msg.add_attachment (u"caractères UNICODE.pdf") # Not mandatory
msg.send()
</pre>


<br>

<p>In the following example, a message is sent to 3 recipients. 
All recipients will see 'List group' as the sender and 'Karrigell list' as recipient. 

<pre class="verbatim">
import k_email

msg = k_email.SendMail(u"Subject of this message", 'smtp.server.com')
msg.set_from (u"List group", '')
msg.set_message('Hello to list')
msg.set_reply_to(u"List group", 'list@server.com')
msg.add_recipient(u'Karrigell list', '', True, False)
msg.add_recipient(u'', 'recipient1@server1.com', False, True)
msg.add_recipient(u'', 'recipient2@server2.com', False, True)
msg.add_recipient(u'', 'recipient3@server3.com', False, True)
msg.send()
</pre>