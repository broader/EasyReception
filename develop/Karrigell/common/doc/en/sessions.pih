<h1><%= chapter %>. Sessions</h1>
<p>Sessions are a way for the server to keep in memory information related to an individual user while he is browsing from page to page
<p>Suppose you are on a site where you've found two CD's you'd like to order ; then on another page you find a book. After that you'll be asked a few questions about your address, a message to send if it's a present, then they'll want to know about you credit card. After that you'll be presented a page with all the info you've entered so far and asked if you want to confirm you purchase
<p>Without sessions this would be difficult ; you'd have to pass all previous information as hidden form fields, which would be difficult to implement
<p>With sessions it becomes very easy ; the user is identified with a "session identifier" which is sent with every request to the server under the form of a cookie. This identifier matches an object in the server to which attributes can be set or retrieved throughout the user's navigation
<p>With Karrigell, on each page where you want to modify or access session information, begin by creating a session objet by :
<p>
<div class="python"><pre class="verbatim">
sessionObj=Session()
</pre></div>
<p>If you're at the beginning of the session, Karrigell will generate a cookie called sessionId and send it back to the web browser. On subsequent requests, the browser will automatically send this cookie and the server will find the associated object
<p>You can set attributes to this session object :
<p>
<div class="python"><pre class="verbatim">
sessionObj.name = "John Doe"
</pre></div>
<p>From another script you'll have access to this value by :
<p>
<div class="python"><pre class="verbatim">
name = Session().name
</pre></div>
<p>

<p>Session objects support a <code>close()</code> method, which causes the session information to be discarded
<p>You don't really have to explicitely close a session ; Karrigell makes sure there are not more than 1000 simultaneaous sessions and erases the oldest ones when the 1000th is reached

<p><b>Warning</b> : there is a risk of the integrity of the session object if several, almost simultaneous requests are sent by the same user agent and modify this object. It is the case if a page holds frames or iframes : since the order in which the requests are handled is not predictable, it is mandatory to design the application to avoid this kind of situation

<h2><%= chapter %>.1 Persistent and in-memory sessions</h2>

<p>The session object can be stored either in memory or on disk (persistent) : this is determined by the server configuration option <CODE>persistent_session</CODE>

<p>For in-memory sessions, you can set any value as attribute to the session object, including instances of user-defined classes, connections to databases, etc.
<p>Unfortunately, in-memory sessions can only work in a mono-process environment, such as the built-in monoprocess server ; it doesn't work in a multithread or multiprocess environment such as the built-in multithread server or behind Apache. In these cases, you must use persistent sessions, and you can only store Python built-in types in the session object


<h2><%= chapter %>.2 Example</h2>
In an HTML file create a form and send it to a PIH script :
<p>
<div class="verbatim"><pre class="verbatim">
&lt;h3&gt;Who are you ?&lt;/h3&gt;
&lt;form action="sessionTestBegin.pih"&gt;
Name &lt;input name="myname"&gt;
&lt;br&gt;First name &lt;input name="firstname"&gt;
&lt;br&gt;&lt;input type="submit" value="Ok"&gt;
&lt;/form&gt;
</pre></div>

<p>The script will receive the input through QUERY or the form field variables 
in the namespace, create a session objet and save <var>name</var> and 
<var>firstname</var> as attributes of this object :

<p>
<div class="python"><pre class="verbatim">
&lt;h3&gt;Begin session&lt;/h3&gt;
&lt;%
sessionObj=Session()
sessionObj.name=_myname
sessionObj.firstname=_firstname
print sessionObj.name
%&gt;

&lt;a href="sessionTestFollow.pih"&gt;Next...&lt;/a&gt;
</pre></div>

<p>The next script is called without any query string, but it will retrieve 
the information through the session object :

<p>
<div class="python"><pre class="verbatim">
&lt;h3&gt;Session test goes on&lt;/h3&gt;
&lt;%
session=Session()
print session.firstname
session.close()
%&gt;
</pre></div>

<p>Because the script has closed the session, if you go back to the previous 
page with your browser and try again the Next... link you'll get a nice 
Python traceback telling you that the session doesn't have a 
<var>firtsname</var> attribute any more. Modify the script by deleting or 
commenting the <code>session.close()</code> line and see what happens