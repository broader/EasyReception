<h1><%= chapter %>. Authentification et gestion des utilisateurs</h1>

<h2><%= chapter %>.1 Login(), Logout() et Role()</h2>

Pour l'authentification des utilisateurs, Karrigell fournit un canevas qui
utilise 3 fonctions intégrées, <code>Login()</code>, <code>Logout()</code> 
et <code>Role()</code>. L'implémentation par défaut s'appuie sur une base
de données d'utilisateurs gérée par le script
<code>users.ks</code>, qui est réservé à l'administrateur de l'hôte. 
Ce script est accessible depuis la page d'accueil : 
Administration/Gestion des utilisateurs

Les utilsateurs peuvent avoir différents rôles, renvoyés par la function 
<code>Role()</code> :
<ul>
<li><code>None</code> si l'utilisateur n'est pas identifié
<li><code>visit</code> s'il est identifié sur un profil "visitor"
<li><code>edit</code> profil "editor"
<li><code>admin</code> profil d'administrateur du site
</ul>

<p>L'administrateur du site peut ajouter d'autres rôles en créant un fichier
appelé roles.txt et en le mettant dans le répertoire de données (<span class="file">
data/www</span> pour l'hôte local). Ce fichier contient une ligne par nom de rôle

<p>Pour restreindre l'accès à un script aux utilisateurs qui ont
un rôle donné, on utilise la function 
<p><code>Login([<i>script,[role,[valid_in,[redir_to,[add_user]]]]]</i>)</code><p>
Quand elle est exécutée, elle vérifie si l'utilisateur est authentifié 
(en se servant d'un cookie) ; si ce n'est pas le cas :
<ul>
<li>une redirection est effectuée vers un script (par défaut <code>/login.ks/login</code>) 
qui invite l'utilisateur à entrer un identifiant et un mot de passe
<li>le script vérifie si ces identifiant et mot de passe sont présents dans
la base de données des utilisateurs et si l'utilisateur correspondant possède
les droits spécifiés dans l'argument <code>role</code> (qui vaut <code>["admin"]</code>
par défaut)
<li>si oui, une redirection est effectuée vers le script de départ, 
ou vers une autre url qui peut être spécifiée par l'argument <code>redir_to</code> : 

<div class="python">
<pre>
Login(role=["admin"],redir_to="/envoie/moi/ici/apres/connection")</code>
</pre>
</div>

<li>par défaut, l'authentification est valable dans le dossier dans lequel le
script est situé. On peut modifier le périmètre de validités par l'argument
<code>valid_in</code>. Par exemple,
<div class="python">
<pre>
Login(valid_in="/")</code>
</pre>
</div>

rend l'authentification valide pour tout le répertoire racine et ses
descendants
</ul>

<p>On peut spécifier un autre script que <code>/login.ks/login</code> comme argument de la
fonction <code>Login()</code> : 
<code>Login(script="/utils/ident_perso.py")</code> par exemple

<p>Si un utilisateur se connecte avec un identifiant qui n'est pas encore dans
la base de données utilisateurs, par défaut il recevra un message d'erreur. En donnant
au paramètre <code>add_user</code> la valeur d'un des rôles possibles (<code>"admin", "edit", "vidit"</code>), un bouton de création d'un nouveau compte est proposé et l'utilisateur pourra entrer ses données personnelles. Dans tous les cas, si l'identifiant existe déjà et que le mot
de passe n'est pas correct, un message d'erreur sera aussi renvoyé

<p><code>Logout(<i>[script,[valid_in,[redir_to]]]</i>)</code> efface
les informations de connection. Le script de déconnections est par défaut
<CODE>/admin/login.ks/logout</CODE> ; <code>valid_in</code> et 
<code>redir_to</code> ont la même signification que pour 
<code>Login()</code>

<h2><%= chapter %>.2 Exemple</h2>

<p>
<div class="python">
<pre class="verbatim">
def index():
    # vérifie que l'utilisateur est éditeur ou administrateur
    Login(role=["edit","admin"])

    # ne s'affiche que si Login() a marché
    print "Connecté comme ",Role()
</pre></div>

<p>Si l'utilisateur n'est pas connecté comme administrateur ou éditeur, <code>Login()</code> redirige vers la page qui demande l'identifiant et le mot de passe
<p>S'il est connecté comme "edit" ou "admin", <code>Login()</code> ne fait rien et le reste de la fonction <code>index()</code> est exécuté : la fonction <code>Role()</code> renvoie le rôle courant de l'utilisateur

<p>