<script src="../pf_test.js"></script>

<h1><%= chapter %>. Importation de modules</h1>

En Python, la façon habituelle d'importer des modules dans un script est
d'utiliser le mot-clé <code>import</code>. L'interpréteur recherche dans une liste de répertoires un module avec le nom indiqué, et, s'il en trouve un, il ajoute le nom du module à l'espace de noms du script

<p>Ceci fonctionne bien dans un environnement mono utilisateur et mono process, mais pose problème si plusieurs utilisateurs peuvent interagir avec l'interpréteur au même moment. Chacun d'eux peut modifier la liste des répertoires dans lequel on cherche les modules, et si 2 utilisateurs veulent importer des modules différents mais avec le même nom, il se peut que l'interpréteur renvoie le module de l'utilisateur A à l'utilisateur B

<p>Pour importer sans risque des modules dans Karrigell, voici ce que vous devez faire :
<ul>
<li>si le module est dans votre distribution standard Python, ou a été installé par les outils setup, utilisez simplement le mot-clé <code>import</code> : il n'y a aucun risque de confusion
<li>vous pouvez stocker vos propres modules dans le répertoire <span class="file">package</span>
de votre distribution Karrigell, et les importer par <code>import</code>
<li>pour les modules écrits par l'utilisateur dans une application, utilisez la fonction intégrée
<code>Import(<i>url_module[,**kw]</i>)</code>
</ul>

Cette fonction <code>Import()</code> renvoie un objet qui se comporte comme un module importé. Pour l'utiliser dans le script vous devez donner un nom à cet objet :

<div class="python">
<pre>
foo = Import("foo.py")
</pre>
</div>

<p>L'équivalent de <code>from foo import bar</code> est :

<div class="python">
<pre>
bar = Import("foo.py").bar
</pre>
</div>

<p>Notez qu'il n'y a pas d'équivalent à <code>from foo import *</code>

<p>L'url du module importé est résolue comme les url de script, vous n'avez donc pas à spécifier l'extension : <code>foo = Import("foo")</code> fonctionne aussi

<p>Les scripts importés sont exécutés dans un espace de noms qui inclut certains
des noms intégrés définis dans le script "appelant"  (<code>CONFIG, _(), Import(), 
PRINT()</code>), mais pas ceux qui sont relatifs au répertoire de ce script, parce
que le script importé peut se trouver dans un autre répertoire. Si vous voulez que
<code>CWD</code> ou <code>REL</code> soient disponibles dans le script importé,
il faut les passer explicitement comme arguments de <code>Import()</code> : 

<div class="python">
<pre>
foo = Import("foo",REL=REL) 
</pre>
</div>

<p>Dans <span class="file">foo.py</span> le nom <code>REL</code> sera disponible :

<div class="python">
<pre>
import os
contenu = open(REL("data.txt"))
</pre>
</div>

<p>Plus généralement, vous pouvez passer des paramètres mots-clés à la fonction
<code>Import()</code> si vous en avez besoin dans le script importé

<p>