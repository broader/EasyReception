<h1><%= chapter %>. URL intelligentes</h1>

La façon normale de passer des paramètres à un script est d'utiliser une chaîne de requête (query string) dans l'url, ou des données de formulaire. Une alternative est de passer ces paramètres comme un composant de l'url, comme dans <code>
http://host/path/script.py/foo/bar</code> ; ici les paramètres pour le script sont 
<CODE>foo</CODE> et <CODE>bar</CODE>

<p>Dans le script vous pouvez accéder à ces paramètres additionnels sous la forme d'un attribut du nom intégré <CODE>THIS</CODE>, <CODE>THIS.args</CODE> :

<p>
<div class="python"><pre class="verbatim">
print "Les paramètres sont %s" %THIS.args
</pre></div>

<p>Un problème avec ces "url intelligentes" est que s'il faut écrire un lien, ou utiliser Include(), ou insérer une image ou du JavaScript, l'url doit être différente selon que le script a été appelé sans argument, ou avec un nombre d'arguments arbitraire dans l'urly number of parameters in the subpath

<p>Par exemple si vous avez cette url relative dans le script :
<p>
<div class="python"><pre class="verbatim">
print '&lt;IMG SRC="images/pic.png"&gt;'
</pre></div>
<p>

et que vous appelez le script par <CODE>http://host/path/script.py/foo/bar</CODE>, le navigateur calculera une url absolue <code>http://host/path/script.py/foo/images/pic.png</code>,
et exécutera le même script avec les paramètres <CODE>foo,images,pic.png</CODE> - ce n'est pas ce que vous voulez !

<p>Pour retrouver la bonne url, utilisez la fonction <code>THIS.rel()</code> de cette façon :

<p>
<div class="python"><pre class="verbatim">
print '&lt;IMG SRC="%s"&gt;' %THIS.rel("images/pic.png")
</pre></div>
<p>

<CODE>THIS.rel</CODE> ajoute en début de l'url relative donnée en argument autant de 
<code>'../'</code> qu'il y a de paramètres dans l'url "intelligente"