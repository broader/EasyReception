import datetime, calendar, locale

from HTMLTags import *

locale.setlocale(locale.LC_ALL,'')
relPath = lambda p : p.split('/')[0]
model = Import('/'.join((relPath(THIS.baseurl), 'model.py')), REQUEST_HANDLER=REQUEST_HANDLER)

modules = {'pagefn' : 'pagefn.py',  'JSON' : 'demjson.py' }
[locals().update({k : Import('/'.join(('',v)))}) for k,v in modules.items() ]

so = Session()
if not hasattr(so, 'user'):
	so.user = None 

def _getAgenda(day=None, props=None):
	''' Get the agenda of the specified day.
	  If no specified day, return all the agenda items.
	  return agenda items' format is:
	  [[year, month, day],...]
	'''
	if not day :
		# get all agenda items
		days = model.get_items(so.user, 'agenda', props=('day',))
		if type(days) == type('') :		
			days = None
		else:			
			days = [i[0] for i in days]
			days = [ [int(day.split('/')[x]) for x in (2, 0, 1)] for day in days ]
			days.sort(key=lambda d : calendar.datetime.date(*d))
	else:
		#ids = model.stringFind('agenda', {'day': day})
		#days = model.get_items(so.user, 'agenda', props,)
		days = model.get_items_ByString(so.user, 'agenda', {'day':day}, propnames=props)
		if type(days) == type('') :		
			days = None
	return days
	
def _monthDeduce(month=None):
	current, pre, next = 3*[None]
	days = _getAgenda()
	if not days :
		now=datetime.date.today()
		day, month, year = now.day, now.month, now.year
		return [None, '-'.join((str(year), str(month))), None, None]
	
	# a temporary function to format month output
	_f = lambda l : '-'.join([ str(n) for n in l] )	
	if not month:
		month = days[0][:2]
		showDays = [day for day in days if day[:2]==month ]		
		if len(days) > len(showDays) :			
			next = _f(days[len(showDays)][:2]) 
	else:		
		month = [int(i) for i in month.split('-') ]
		showDays = [day for day in days if day[:2]==month ]		
		if days.index(showDays[0]) != 0 :
			i = days.index(showDays[0]) -1 
			pre = _f(days[ i ] [:2]) 
		if days.index(showDays[-1]) != (len(days)-1) :
			i = days.index(showDays[0] )+len(showDays)			
			next = _f( days[ i ] [:2])
		
	current = _f(showDays[0][:2])	
	showDays = [ i[-1] for i in showDays ]	
	return showDays, current, pre, next

MONTHDIV = 'monthDiv'	
MONTHARROW = 'mArrow'
CMONTH = 'cmonth'
CDAY = 'cday'
def _showMonth(days=None, current=None, pre=None, next=None, backPage=True):		
	if not current :
		days, current, pre, next = _monthDeduce(current)
	
	year, month = [int(i) for i in current.split('-') ]

	# all the days in the month and these days are divided into groups each has seven days.
	weeks = calendar.monthcalendar(year,month)
	# the locale description of this month and this year	
	headerMonth = calendar.month(year,month).split('\n')[0]
	headerMonth = SPAN(headerMonth, **{'ref': current, 'id': CMONTH})
	# the link to previous and next month
	tds = []
	for m,s in zip( (pre, next), ('<<', '>>') ) :
		url = 'agenda/agenda.ks/page_month?div=false&month='
		if m :
			url += m
			attr = {'href':url, 'target': MONTHDIV, 'class' : MONTHARROW}
			tds.append(TD(LABEL(s, **attr)))
		else:
			tds.append(TD(''))
	tds.insert(1, TD(headerMonth, colspan=5, align='center'))
	thead = [ TR( Sum(tds),\
		              style='border-bottom: 0.1em solid black;border-top: 0.25em solid black;font-weight:bold;')\
		     ]		
	tds = [ TD(i) for i in pagefn.WEEKDAYS ]
	thead.append( TR(Sum(tds), style='border-bottom: 0.1em solid black;'))
		
	script = \
	'''
	$(document).ready(function(){
		var mArrow=".%s", dayClass=".%s";
		var currentMonth = "#%s";
		var listId = "#%s", listUrl = "%s";
		
		// set callback function for the link in the div that shows month calendar
		$(mArrow).unbind().click(function(){
			var div = '#' + $(this).attr('target');			
			var url = $(this).attr('href');
			$(div).load(url);			
		});
		$(dayClass).click(function(){
			var month = $(currentMonth).attr('ref');
			var day = $(this).text(); 
			day = [month, day].join('-');
			var url = listUrl + '?day=' + day;			
			$(listId).load(url);
		});
	});
	'''%(MONTHARROW, CDAY, CMONTH, LISTID, 'agenda/agenda.ks/page_agendaList')
	thead.append(pagefn.script(script, link=False))	
	
	thead = THEAD(Sum(thead))
	# render the month calendar
	tbody = []
	# a temporary function to replace '0' to ''
	_replaceNone = lambda z : ( z != 0 and z) or ''
	for w in weeks :		
		tds = [] 
		for i in w :			
			attr = {}		
			if i in days :
				attr.update( {'style' : 'background:gainsboro;', 'class' : CDAY})			 
			tds.append(TD(SPAN( _replaceNone(i)), **attr))
			
		tbody.append( TR(Sum(tds)))
			
	tbody = Sum(tbody)
	content = TABLE(Sum((thead, tbody)))
	if backPage:
		content = DIV(content, **{'style': 'margin-left: 2em;', 'id' : MONTHDIV})
		content = DIV( content, \
					 **{'class' : 'c33l', 'style': 'border-right: 1px #ddd solid;margin-left: 1em;width:30%;'})	 	    
	return content

def page_month(**args):	
	days, cur, pre, next = _monthDeduce(args.get('month'))	
	print _showMonth(days, cur, pre, next, backPage=False)
	return
	

ADDBUTTON='addAgenda'
def _editActions(**args):	
	search = [ LABEL(_('Search:'), **{'for' : 'aid', 'style':'font-weight:bold;font-size:1.2em;color:red;'}),\
			 INPUT( **{'id': 'aid', 'type':'text', 'size':'20', 'name':'asearch'}) ]
	
	spans = [ SPAN(Sum(search)), \					
			SPAN( A(_('< Add New Agenda >'), href='#'),\
				  **{'class': ADDBUTTON,\
				       'style':'font-weight:bold;font-size:1.5em;margin-left:0.2em;text-decoration:underline;'}\
				 ) \
		      ]
	
	script = _editDialog( ADDBUTTON )
	spans.append(script)		
	div = DIV(Sum((spans)))		
	return DIV(div, **{'class' : 'subcolumns', 'style':'border-bottom: 1px #ddd solid;'})

ACCORDIONID = 'accordion'
LISTID = 'alist'
EDITBUTTON = 'editAgenda'
def _agendaList(day=None, backPage=True):
	if not day :
		txt = H6(_('Please select a day to show the agenda on it.'))
		content = [txt, DIV('', **{'id': ACCORDIONID, 'style':'width: 70%;'})]			
		return DIV( Sum(content), \
				     **{'id': LISTID, 'class' : 'subcolumns', 'style':'border-bottom: 1px #ddd solid;'}) 	
	
	txt = SPAN( PRE(_('The agenda of %s:'%day)), \
			    **{'style' : 'font-weight:bold;font-size:1.3em;font-style:italic;'})
	content = [BR(),txt, ]
		
	day = day.split('-')
	day = [day[i] for i in (1, 2, 0)]
	day = '/'.join( [ s.zfill(2) for s in day] )
	aProps = ( 'start', 'end', 'title', 'des', 'speakers', 'location', 'serial')
	agenda =  _getAgenda(day,  aProps)	
	
	# render the agenda items of this day
	divs = []
	for item in agenda :
		adict = dict(zip(aProps, item))		
		# render item title, including start time, end time and title
		prefix = TEXT(6*'&nbsp;')
		start, end = [ adict.get(name) for name in ('start', 'end') ]
		timebucket = SPAN(' - '.join((start, end)))
		title = SPAN(adict.get('title') or '')
		title = H4(Sum((prefix, timebucket, TEXT(6*'&nbsp;'), title)), **{'href' : '#'})
		# render item inner content, including description, speakers and location
		inner = []
		for prop in ('des', 'speakers', 'location') :
			attr = {}
			if prop == 'des':
				attr['class'] = 'summary'				 
			elif prop == 'location':
				attr['class'] = 'location'
			
			txt = ''.join((FIELD2INFO.get(prop) , ' : ', adict.get(prop) or ''))			
			inner.append(SPAN(txt, **attr))
		# add a edit link tag
		inner.append(A( _('Edit'), \
					   href='#', \
					   ref=adict.get('serial'), \
					   **{'class': EDITBUTTON, 'style':'font-weight:bold;text-decoration:underline;'}))
			
		inner = DIV(Sum(inner), **{'class' : 'vevent'})		
		#inner = DIV( Sum([SPAN(adict.get(prop) or '') for prop in ('des', 'speakers', 'location') ]))
		divs.append(Sum((title, inner)))
	   
	listDiv = DIV(Sum(divs), **{'id': ACCORDIONID, 'style':'width: 70%;'})
	content.append(listDiv)
	
	# javascript for accordion function
	script = \
	'''
	$(document).ready(function(){
		var alist="#%s";
		// apply accordion style to agenda list 		
		$(alist).accordion({
			    active: true, 
			    autoheight : true,
			    header: 'h4',			     
			    event: 'mouseover',
			    clearStyle : true 
		});		
	});
	'''%ACCORDIONID
	content.append(pagefn.script(script, link=False))
	
	# add callback function to edit button of each item in agenda
	script = _editDialog( EDITBUTTON )
	content.append(script)
	
	content = Sum(content)	
	if backPage :
		content = DIV( content, \
					**{'id': LISTID, 'class' : 'subcolumns', 'style':'border-bottom: 1px #ddd solid;'}) 
	return content

def page_agendaList(day):
	print _agendaList(day, backPage=False)
		
def _agenda(**args):
	divs = [_editActions(), _agendaList()]	
	content = DIV(Sum(divs), **{'class':'subcolumns'})
	return DIV(content, **{'class' : 'c66r'})
	
def page_rightDiv(**args):
	pass

	
CONTAINER_STYLE = \
{ 'class' : 'subcolumns',\
  'style' : 'border-bottom: 1px #ddd solid; margin: 1em; width:auto;'}

RELPATH = (lambda p : p.split('/')[0])(THIS.baseurl)

def index(**args):
	''' The reservations, help issues and system messages, 
	   all these are hold in a 'subcolumns' Div component.
	'''	
	# import css and javascript files at first
				
	# css
	srcs = ('lib/ui/css/flick/jquery-ui-1.7.2.custom.css', 'lib/timepicker/jquery.ptTimeSelect.css')
	for src in srcs :
		print pagefn.css(src)
	
	# javascript, inluding accordion, calendar, time picker, form validate, etc.
	srcs = ('lib/ui/js/jquery-ui-1.7.2.custom.min.js', 'lib/validate/jquery.validate.js', \
		    'lib/validate/validation_messages.js.pih', 'lib/timepicker/jquery.ptTimeSelect.js')
	for src in srcs :
		print pagefn.script(src, link=True)
	
	# render the content
	print DIV(Sum((_showMonth(), _agenda())), **CONTAINER_STYLE)	
	return	 

FORMFIELDS = ('title', 'des', 'speakers', 'day', 'start', 'end', 'location')
FIELD2ID = {'day': 'dayid', 'start' : 'startid', 'end': 'endid' }  
NEEDUI= ('day', 'start', 'end')
FIELD2INFO = {'title' : _('Title'), 'des' : _('Desscription'), 'speakers': _('Speakers'),\
			'day':_('Day'), 'start':_('Start Time'), 'end':_('End Time'), 'location': _('Location')}
POSTEDIT = 'agenda/agenda.ks/page_postEdit'
def _editDialog(button):
	''' Render the javascript to render a popup dialog to edit agenda item.
	'''
	# Add edit form widget, which is a popup dialog and 
	# has some interactive widghet for html components, calendar, time picker, etc.
	paras = [ EDITFORM, ]
	[ paras.append(FIELD2ID.get(field))  for field in NEEDUI]
	paras.extend([ _('Hour'), _('Minute'), _('OK')]) 
	paras.extend([ POSTEDIT, button,  _('OK'), _('Cancel'), str(_editForm()).replace('\n', '') ])		
	paras = tuple(paras)
			
	script = \
	'''
	$(document).ready(function(){
		var formId = "%s", formSelector = "#" + formId; 
		var dayId= "#%s", startId="#%s", endId="#%s";	
		var hour = "%s", minute="%s", bn="%s";	
		var editUrl="%s", addBn = ".%s";	
			
		// add click callback function to add agenda action		 
		function formValid(v,m){
			if(!v){
				return true
			}
			else{				
				return $(formSelector).validate({errorClass: "highlight", errorElement: "div"}).form()				
			}
		}
		
		function formAction(v,m,f){
			// for 'cancel' button, do nothing
			if(!v){return true}
			var paras = '';					
			$.each(f, function(k,v){				
				paras = [paras, [k,v].join('=')].join('&');
			});
			url = [editUrl, paras].join('?')
			$.getScript(url);		
		}
		
		function setUI(){			
			if (serial != undefined){				
				alert(serial);
				// set old values to form's fields 
			}
			$(formSelector).load();
			$(dayId).datepicker();
			option = {hoursLabel: hour, minutesLabel: minute, setButtonLabel: bn}
			$(startId).ptTimeSelect(option);
			$(endId).ptTimeSelect(option);
		}
		
		var serial = ''
		var html = '<form id="x"></form>'.replace(/x/i, formId);
		$(addBn).click(function(){
			serial=$(this).attr("ref");
			option = 	{ prefix: "cleanblue",			  		   	
			  		   buttons: { %s : true, %s : false},
			  		   top: 30,		  		   			  		   
			       		   submit: formValid,
			       		   loaded: setUI,
			       		   zIndex: 0,
			       		   callback : formAction,
			  		   opacity : 0.9};			
			//$.prompt('%s', option);
			$.prompt(html, option);
		});
	});	
	'''%paras	 
	return pagefn.script(script, link=False)
	
EDITFORM = 'editForm'
def _editForm(**args):
	fields = FORMFIELDS
	field2info = FIELD2INFO 
	required = ('title', 'day', 'start', 'end', 'location')
	# render fields
	table = [ CAPTION(SPAN(_('Edit Agenda'), **{'style' : 'font-weight:bold;font-size: 1.5em;'})), ]
	tbody = []
	for field in fields :
		label = TD(LABEL(field2info.get(field)))
		attr = {'name' : field}
		if field in required :
			attr['class'] = 'required'
		if field in NEEDUI:
			attr['id'] = FIELD2ID.get(field)
			
		if field != 'des' :
			attr['type'] = 'text'			
			input = SPAN(INPUT(**attr))
		else:
			attr.update( {'tyep' : 'textarea'})
			input = SPAN(TEXTAREA(**attr))
		input = TD(input)
			
		tbody.append(TR(Sum((label, input))))
	
	table.append(Sum(tbody))
	
	# add javascripts for input UI
	paras = tuple([ FIELD2ID.get(field) for field in NEEDUI])
	script = \
	'''
	$(document).ready(function(){
		var dayId= "#%s", startId="#%s", endId="#%s";
		$(dayId).datepicker();
	});
	'''%paras
	
	# render form
	#return FORM(TABLE(Sum(table)), **{'id' : EDITFORM, 'action' : 'agenda/agenda.ks/page_edit'})
	return FORM(TABLE(Sum(table)), **{'id' : EDITFORM})	
	
def page_postEdit(**args):
	#print 'alert("%s")'%str(args)
	fields = FORMFIELDS
	if args.get('action') != 'edit':
		attrs = args
		[attrs.pop(key) for key in attrs.keys() if (attrs[key] in (None, '')) or (key == '_') ]
		#attrs = [args.get(field) for field in fields if args.get(field) not in (None, '')]		
		aid = model.create_item(so.user, 'agenda', attrs)			
		info = _('Agenda %s has been created!'%aid)
		print pagefn.prompt(info)
		# refresh the category select box	 and the service list table
	else:
		pass
	
