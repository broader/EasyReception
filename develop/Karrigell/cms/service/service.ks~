# karrigell modules
from HTMLTags import *

# import other moules
relPath = lambda p : p.split('/')[0]
model = Import('/'.join((relPath(THIS.baseurl), 'model.py')), REQUEST_HANDLER=REQUEST_HANDLER)

modules = {'pagefn' : 'pagefn.py','formRender' : 'formRender.py', 'config' : 'admin_config.py' }
[locals().update({k : Import('/'.join(('..', v)))}) for k,v in modules.items() ]

so = Session()
if not hasattr(so, 'user'):
	so.user = None 

def _getCategory( ):
	# get value from 'service' class in database
	values = model.get_items('admin', 'service', ('category',))
	if type(values) == type(''):
		values = []
	else:
		values = [item[0] for item in values ]
		values = [c for c in set(values)]
		values.sort()
	return values
	
SERVICE_SELECT_ID = 'stype'
TITLE_ATTR =  {'style' : 'font-size: 1.2em;font-weight:bold;color:blue;'}
def index(**args):	
	''' The page for show service list for client's view.
	'''	
	# First, add a select to this page
	page_category()
	print HR()
	
	# Second, constructs the service list table
	page_serviceList(init=True, page='client')
	return	
	
SERVICE_LIST_DIV = 'serviceList'
SERVICE_EDIT_DIV = 'serviceEdit'		
CATEGORYBOX_ID = 'stype'	
CATEGORYDIV_ID = 'categoryDiv'
def page_category(**args):
	# render service selection box	
	# get value from 'service' class in database
	categories = _getCategory()	
	values = [(category, category) for category in categories]
	if args.get('client') == 'admin':
		values.insert(0, ('create', _('Create a new service')) )  
	
	options = []
	for value, label in values:
		options.append(OPTION(TEXT(label), **{'value' : value}))
	
	txt = TEXT(_('Select a type of service'))
	options.insert(0, OPTION(txt, **{'disabled' : 'disabled', 'selected' : 'selected'}))
	
	# get style info to make this select looking nice
	style = pagefn.SELECT_CSS
	style += ':'.join(('width', '13em'))
	sname = CATEGORYBOX_ID
	select = SELECT(Sum(options), **{'id' : sname, 'name' : sname, 'style' : style})
	txt = _('Please Select a type of Service :')
	attr = TITLE_ATTR
	attr['for'] = sname
	label = LABEL(txt, **attr)
	if args.get('init'):
		div = DIV(Sum((label, select)), **{'class':'type-select', 'id' : CATEGORYDIV_ID})
		print div,HR()
	else:
		print Sum((label, select))
	
	# set the callback function for selecting action	
	d = {'selectId' : CATEGORYBOX_ID,\		
		'listDiv' : SERVICE_LIST_DIV\
		}

	if args.get('client') == 'admin' :		
		d.update({\
			'listUrl' : 'service/service.ks/page_serviceList',\
			'editDiv' : SERVICE_EDIT_DIV,\
			'editUrl' : 'service/service.ks/page_serviceEdit',\
			'page' : 'admin'
		})
	else:
		d.update({\
			'listUrl' : 'service/service.ks/page_serviceList',\
			'editDiv' : RESERVE_EDIT_DIV,\
			'editUrl' : 'service/service.ks/page_reserveEdit',\
			'page' : ''
		})
	paras = ['='.join((k, v)) for k,v in d.items() ]
	paras = '&'.join(paras)
	url = 'service/serviceChange.js.pih'
	src = '?'.join((url, paras))	
	print pagefn.script(src)
	
	
def page_showService(**args):
	''' Show service categories, service list table and 
	  service edit component. 
	'''
	# render category select box	
	page_category(init=True, client='admin')
	
	# render the service list table
	page_serviceList(init=True, page='admin')
	
	# service edit Div component
	edit_url = 'service/service.ks/page_serviceEdit'		
	d2 = {'id' : SERVICE_EDIT_DIV, 'src' : edit_url}	
	print DIV(**d2)
	
def _getServiceItems(category, props=None):
	# get items from 'service' class in database
	search = {'category' : category}
	values = model.get_items_ByString(so.user, 'service', search, props)
	return values

def _sortree(values, treeInfo):
	""" 
	Parameters:
		-'treeInfo',the index which holds the tree information in the list.
	"""
	tree = []
	for row in values :		
		if row in tree:			
			continue
					
		parent = row[treeInfo].get('parent')
		if not parent :
			# this row is a parent node, append to the tree directly
			tree.append(row)
		else:
			# find the parent node
			node = filter(lambda i : i[0] == parent, values)
			
			if node :
				if node[0] not in tree :
					# add parent node to the tree first
					tree.append(node[0])
				else:
					index = tree.index(node[0]) + 1
				
				# add all the children to the parent node
				children = filter(lambda i : i[treeInfo].get('parent') == parent, values)				
				[tree.insert(index, i) for i in children]				
			else:
				# not find parent node, do nothing
				continue
	return tree


PROPS4TABLE =  ['serial', 'detail', 'description', 'price', 'amount']
CATEGORY_TAG = 'noUsed'
SUBCATEGORY_TAG = 'hasChildren'
def page_serviceList(**args):
	''' constructs the service list table
	'''
	service,page = [args.get(i) for i in ('name', 'page') ]
	if service:
		title = _('%s List'%service)
	else:
		title = _('Service Items List Table')
	title = H4(title, **TITLE_ATTR)

	if not service :
		content = title
		if args.get('init') :
			lid = SERVICE_LIST_DIV
			content = Sum((DIV(content, **{'id' : lid}), HR()))
		print content
		return 	
	
	props = PROPS4TABLE
	# the value of 'id' property will be added to 0 index automatically 
	content = _getServiceItems(service, props)	
	
	title2prop = {'Category' : 'serial', 'Name' : 'detail', 'Description' : 'description',\
				'Unit Price' : 'price', 'Amount' : 'amount'}
	# render tree table
	titles = [ 'Category', 'Name', 'Description', 'Unit Price', 'Amount', 'Left']
	
	# For user view, "Left" is not needed.
	if page != 'admin':
		titles.pop(-1)
		
	# parse values to real service list value
	sbody = []
	for value in content:
		row = []
		for title in titles :
			if title == 'Left' :
				v = 0
			else:
				prop = title2prop.get(title)
				v = value[props.index(prop)]
				if prop == 'detail':		
					v = model.reserve_detailParser(v, ('alias', 'parent'))	
										
			row.append(v)
		sbody.append(row)
	
	sbody = _sortree(sbody, treeInfo=1)	
	
	tbody = []
	for row in sbody:		
		id = '-'.join(('node', row[0]))
		attr = {'id':id}		
		parent = row[1].get('parent') 
		if parent:
			suffix = '-'.join(('node', parent))			
			attr['class'] = '-'.join(('child-of', suffix))	
		else:
			attr['class'] =SUBCATEGORY_TAG
		tds = []	
		
		for value,title in zip(row,titles):			
			if title == 'Left':
				value = 0
				tds.append(TD(SPAN(value, **{'class':CATEGORY_TAG})))
				continue
				
			prop = title2prop.get(title)
			if prop == 'serial' :
				style = {'class' : prop}
				if parent or page != 'admin' :
					style['style'] = 'display:none;'
				tds.append(TD(SPAN(value or '', **style)))
			elif prop == 'detail':
				iprops = ('alias', 'parent')
				c = [ SPAN(value.get(iprops[0]) or '', **{'class' : iprops[0]}),\
					SPAN(value.get(iprops[1]) or '', **{'style': 'display:none;', 'class' : iprops[1]})]
				tds.append(TD(Sum(c)))
			elif prop == 'amount':
				try:
					value = int(float(value))
					if value == 0:
						value =''
				except:
					value = ''
				tds.append(TD(SPAN(value, **{'class' : prop})))
			else:
				tds.append(TD(SPAN(value or '', **{'class' : prop})))
		tbody.append(TR(Sum(tds), **attr))		
	
	attrs = {'style' : 'text-align: left; font-size: 1.8em;font-weight:bold;' }
	caption = CAPTION( service, **attrs)
	thead = [TH(title) for title in titles]
	thead = THEAD(TR(Sum(thead)))
	
	tbody = TBODY(Sum(tbody))
	
	table = (caption, thead, tbody)
	table = TABLE(Sum(table))
	print table
	
	# Import treeTable js lib, 
	# and the script adding callback functions to the cells in the table.
	if page == 'admin' :
		props = { 'listDiv': SERVICE_LIST_DIV,\				
				'editDiv': SERVICE_EDIT_DIV,\
				'editUrl': 'service/service.ks/page_serviceEdit' ,\	
				'categoryTag' : CATEGORY_TAG,\							
				'action' : 'edit'} 
		paras = '&'.join([ '='.join((n, v)) for n,v in props.items() ])	
		links = ('lib/treeTable/jquery.treeTable.js', 'service/serviceList.js.pih?%s'%paras)	
	else:		
		props = { 'serviceDiv': SERVICE_LIST_DIV,\
				'reserveDiv': RESERVE_LIST_DIV,\
				 'editDiv': RESERVE_EDIT_DIV,\
				 'editUrl': 'service/service.ks/page_reserveEdit' ,\
				 'categoryTag' : CATEGORY_TAG,\
				 'subcategoryTag' : SUBCATEGORY_TAG,\
				 'action' : 'create' } 
		paras = '&'.join([ '='.join((n, v)) for n,v in props.items() ])		
		links = ('lib/treeTable/jquery.treeTable.js', 'service/reserveList.js.pih?%s'%paras)		
	
	for link in links :
		print  pagefn.script(link)

	return
	
def page_serviceEdit(**args):
	action = args.get('action')
	# css style for title
	attr = TITLE_ATTR
	if not action:
		#print H4('Edit Service', **attr ), BR()
		pass
	elif action == 'create':		
		content = ''' var listId = "%s";
				   var url = "%s"; 
				   $('#' + listId).loadJFrame(url);
				'''%(SERVICE_LIST_DIV, 'service/service.ks/page_serviceList?page=admin')
		print pagefn.script(content, link=False)		
		print H4(_( 'Create a new service item' ), ** attr), BR()
		_serviceEditForm()
	elif action == 'edit':
		 print H4('Edit Service', **attr ), BR()		 
		 _serviceEditForm(**args)
		 	
EDIT_BUTTON = 'service_edit_bn'
def page_postServiceEdit(**args):
	# get submit button
	sbn = args.get('submit')
	buttons = config.form_buttons
	if sbn == None :	
		# edit this service 
		attrs = dict(args) 
		actionType = attrs.pop('actiontype')		
		if actionType == 'create' :
			[attrs.pop(key) for key in attrs.keys() if attrs[key] in (None, '') ]
			id = model.create_item(so.user, 'service', attrs)			
			info = _('Service %s has been created!'%id)
			print pagefn.prompt(info)
			# refresh the category select box	 and the service list table		
			content = \
			''' 
			var categoryDiv = "%s", categoryUrl = "%s";					   			   
	                $("#" + categoryDiv).loadJFrame(categoryUrl);
			var serviceDiv = "%s", serviceUrl = "%s"; 
			$("#" + serviceDiv).loadJFrame(serviceUrl);
			'''%(CATEGORYDIV_ID, 'service/service.ks/page_category?client=admin', SERVICE_LIST_DIV, 'service/service.ks/page_serviceList?page=admin&action=create&name=%s'%attrs.get('category'))
			print content
		elif actionType == 'edit':
			serial = attrs.get('serial')
			if serial:
				attrs.pop('serial')				
				operator,klass = (so.user, 'service')
				nodeId = model.get_items_ByString(operator, klass, {'serial': serial}, propnames=None, needId=True)[0]
				
				model.edit_item(operator, 'service', nodeId, attrs, actionType='edit', keyIsId=True)	
				# refresh the service list table
				content = ''' var divId = "%s", url = "%s";						   
						   $("#" + divId).loadJFrame(url); 
						 '''%(SERVICE_LIST_DIV, 'service/service.ks/page_serviceList?page=admin&action=edit&name=%s'%attrs.get('category'))
				print content		
			
		# refresh the show Div component		
		print 'button=document.getElementById("%s");'%EDIT_BUTTON
		print 'jFrameSubmitInput(button);'
	else:		
		action = args.get('actiontype')
		serial = args.get('serial')		
		if not serial:
			if sbn == config.form_buttons[0] :
				print H4( _('Sevice Creation Action Successful.'), **TITLE_ATTR)
			else:
				print H4( _('Sevice Creation Action Canceled.'), **TITLE_ATTR)
			# change the select box to none selected status
			script = '''option = $("#%s").children()[0];
					$(option).attr('selected', 'selected');
					'''%SERVICE_SELECT_ID
			print pagefn.script(script, link=False)
		else:			
			if sbn == config.form_buttons[0] :			
				info = H4( _('%s Sevice Edit Success.'%serial) , **TITLE_ATTR)				
			else:
				info = H4( _( '%s Sevice Edit Action Canceled.'%serial), **TITLE_ATTR)
			print info
		return
	
def _serviceEditForm(**args):
	actiontype = args.get('action')
	categoryId = 'category'
	props = [categoryId, 'serial', 'description', 'price', 'amount', 'detail']	
	prop2title = { 'category':_("Category"),\
				 'name': _('Name'),\
				 'description' : _('Description'),\
				 'price':_('Unit Price'),\
				 'amount':_('Amount'),\
				 'detail':_('Service Detail Info')}  
	
	# the required fields to be input	
	required = [categoryId, 'name']		         
	if not actiontype :
		oldvalues = {'actiontype' : 'create'}
		props.remove('serial')
	else:
		oldvalues = {'actiontype' : actiontype}				
		for prop in props:
			if prop == 'amount':
				value = args.get(prop)
				if value :
					value = int(float(value))
				oldvalues[prop] = value
			elif prop == 'detail':
				dprops = ('parent', 'alias')
				detail = []
				for prop in dprops:
					v = args.get(prop)
					if v :
						detail.append(':'.join((prop, v)))
				oldvalues['detail'] = ';'.join(detail)
				if not args.get('parent'):
					# remove the noused fileds for root node
					[props.remove(i) for i in ('amount', 'price') ]				
			else:
				oldvalues[prop] = args.get(prop)				
						
	# constructs the form template	
	template = []	
	template.append(['',{'name':'actiontype', 'type':'hidden'}, 'input'])	
	for prop in props:
		if prop == 'serial':
			ptype = 'hidden'
		else:
			ptype = 'text'
		template.append([prop2title.get(prop),{'id': prop, 'name': prop, 'type':ptype}, 'text'])
	
	form = formRender.render_rows(template, oldvalues, required)
	values = config.form_buttons
	sbn = INPUT(**{'id':  EDIT_BUTTON,\
				 'type':'submit', \				 
				 'value': values[0], \
				  'jframe':'no',\
				  'target': SERVICE_EDIT_DIV,\				 
				 'style': 'width:7em;height:2.6em;font-weight:bold;font-size:1.1em;' })

	cbn = INPUT(**{'type':'button', \
				'name':'cancel',\
				'value': values[1], \
				'style': 'width:7em;height:2.6em;font-weight:bold;font-size:1.1em;'})
				
	buttons = DIV(Sum((sbn, cbn)), **{'class':'type-button'})	
	form.append(buttons)	 		
	action_url = 'service/service.ks/page_postServiceEdit' 
	formId = 'service_new_form'
	print FORM(Sum(form), **{'id': formId, 'class': 'yform', 'action': action_url})
	
	# add the select box to 'category'
	cid = CATEGORYBOX_ID	
	src = 'service/serviceEditSelect.js.pih?cid=%s&ncid=%s'%(cid, categoryId)
	if actiontype == 'edit':
		src += '&oldtype=%s'%oldvalues.get('category')
	print pagefn.script(src)
	
	# below is the javascript code for this form action
	txt = "$(document).ready(function(){$.getScript('service/serviceSubmitAction.js.pih?formId=%s');});"%formId
	print pagefn.script(txt, link=False)

RESERVE_EDIT_DIV = 'reserveEdit'
def page_reserveEdit(**args):
	''' The page to show reservations.
	'''
	attrs, anchor = (TITLE_ATTR, 'reservationTitle' ) 	 
	attrs['id'] = anchor
	print H4(_( 'Reserve Service' ), **attrs),HR()
	
	serial = args.get('serial')
	if not serial or not args.get('parent') :
		# When first rendering this div component in the page, 
		# set the div's id property.
		content =\
		'''
		var reservationTitle = '%s', divId = '%s';		
		var div = $("#" +reservationTitle).parent();
		if( $(div).attr('id') != divId ){				
			$(div).attr('id', divId);
		}					
		'''%(anchor, RESERVE_EDIT_DIV)	
		print pagefn.script(content, link=False)
		return
			
	# get service's values	
	svalues = []
	props = ('alias', 'description', 'price')		
	titles = ( _('Name'), _('Description'), _('Unit Price') )
	for prop in props:							
		svalues.append(args.get(prop))
	
	# a table to show the information of this service	
	table = []
	
	# Append the caption of this table, 
	# which is the information of the parent node of this service.  
	caption =  _("Detail Info")
	cid = 'listCaption'
	attrs = {'style' : 'text-align: center; font-size: 1.6em;font-weight:bold;',\
		       'id' : cid}
	table.append( CAPTION(caption, **attrs))
	trs = formRender.render_table_fields(titles, svalues, 1)
	
	# now constructs and render the Table
	table.append(trs)
	print TABLE(Sum(table), style="margin-left:3em;")
	
	# set 'caption' info
	parent,action = [ args.get(name) for name in ('parent', 'action') ]
	if action == 'create':
		targetDiv = SERVICE_LIST_DIV
	else:
		targetDiv = RESERVE_LIST_DIV
	
	# Below javascript is used to set the 'caption' of the 
	# service table to be the subcategory name of this service
	# to be reserved.	 
	script = \
	'''
	var cid='%s', serial='%s', listDiv='%s', category='.%s';
	$('#' + listDiv + ' table tbody tr')
	.filter(category)
	.each(function(){
		// get the first 'td' element of this 'tr'
		var td = $(this).children()[0];			
		var spans = $(td).children().not('.expander');
		if($(spans[0]).text() != serial){
			return true
		}		
		var txt = $(td).next().text();			
		$('#' + cid).text(txt);
		return false;		 
	});	
	'''%(cid, parent, targetDiv, SUBCATEGORY_TAG)
	print pagefn.script(script, link=False)
	
	_reserveForm(**args)
	return

RESERVE_EDIT_BUTTON = 'reserveEditBn'
def _reserveForm(**args):
	'''
	render the form emlements for reservation action
	'''
	actiontype, serial, service = [args.get(i) for i in ('action', 'serial', 'service') ]
	if actiontype == 'create' :
		serviceId = model.serial2id(serial)
	else:
		serviceId = model.serial2id(service)
						   
	# the fields required to be input	
	required = [ ]		       	
	oldvalues = {'booker':so.user, 'target': serviceId, 'actiontype' : actiontype}
	# constructs the form template	
	template = []
	paras = [ 'actiontype', 'target', 'booker' ]
	props = ['amount', 'memo']	
	prop2title = { 'amount':_('Amount'), 'memo':_('Adendum')}
	if actiontype == 'edit' :	
		[oldvalues.update({prop : args.get(prop)}) for prop in props if args.get(prop) not in  (None, '') ]
		amount = oldvalues['amount'] 	
		if amount :
			oldvalues['amount'] = int(float(amount))			
		oldvalues['serial'] = model.serial2id(serial)
		paras.append('serial')
		
	[template.append(['',{'name' : name, 'type':'hidden'}, 'input']) for name in paras]	
	for prop in props:
		if prop == 'memo':			
			template.append([prop2title.get(prop),{'id': prop, 'name': prop}, 'textarea'])
		else:			
			template.append([prop2title.get(prop),{'id': prop, 'name': prop, 'type' : 'text'}, 'text'])
	
	form = formRender.render_rows(template, oldvalues, required)
	values = config.form_buttons
	sbn = INPUT(**{'id' : RESERVE_EDIT_BUTTON,\
				 'type':'submit', \				 
				 'value': values[0], \
				  'jframe':'no',\
				  'target': RESERVE_EDIT_DIV,\				 
				 'style': 'width:7em;height:2.6em;font-weight:bold;font-size:1.1em;' })

	cbn = INPUT(**{'type':'button', \
				'name':'cancel',\
				'value': values[1], \
				'style': 'width:7em;height:2.6em;font-weight:bold;font-size:1.1em;'})
				
	buttons = DIV(Sum((sbn, cbn)), **{'class':'type-button'})	
	form.append(buttons)	 		
	action_url = 'service/service.ks/page_postReserveEdit' 
	formId = 'reserveForm'
	print FORM(Sum(form), **{ 'id': formId, 'class': 'yform', 'action': action_url})
	
	# below is the javascript code for this form action
	txt = "$(document).ready(function(){$.getScript('service/reserveSubmitAction.js.pih?formId=%s');});"%formId
	print pagefn.script(txt, link=False)
	
def page_postReserveEdit(**args):
	# get submit button
	sbn = args.get('submit')
	buttons = config.form_buttons
	if sbn == None :	
		# check the type of this reservation 
		attrs = dict(args) 
		actionType = attrs.pop('actiontype')		
		if actionType == 'create' :
			[attrs.pop(key) for key in attrs.keys() if attrs[key] in (None, '') ]
			id = model.create_item(so.user, 'reserve', attrs)			
			info = _('Reservation %s has been created!'%id)
			print pagefn.prompt(info)			
		elif actionType == 'edit' :
			reserveId = attrs.pop('serial')
			if reserveId :
				model.edit_item(so.user, 'reserve', reserveId, props=attrs, actionType='edit', keyIsId=True)
				
		# refresh the show Div component and the reserve list table
		js = \
		'''		
		var reserveDiv='#%s';		
		$(reserveDiv).loadJFrame('%s');
		var button=document.getElementById("%s");
		jFrameSubmitInput(button);
		'''%( RESERVE_LIST_DIV, 'service/service.ks/page_reserveList', RESERVE_EDIT_BUTTON )
		print js
	else:
		action = args.get('actiontype')
		serial = args.get('serial')		
		if not serial:
			if sbn == config.form_buttons[0] :
				print H4('Reservation Creation Action Successful.', **TITLE_ATTR)
			else:
				print H4('Reservation Creation Action Canceled.', **TITLE_ATTR)
		else:			
			if sbn == config.form_buttons[0] :			
				info = H4('%s Reservation Edit Success.'%serial, **TITLE_ATTR)				
			else:
				info = H4('%s Reservation Edit Action Canceled.'%serial, **TITLE_ATTR)
			print info

RESERVE_LIST_DIV = 'reserveList'	
def page_reserveList(**args):
	''' Show all types of reservations of user.
	'''
	attrs = TITLE_ATTR
	attrs['id'] = 'reserveListTitle'
	print H4(_('Your Reservations  :'), **attrs),HR()
	
	init = args.get('init')	
	if init and int(init):
		# when first render the div for showing reserves' list,
		# set the div's id to be RESERVE_LIST_DIV.
		content =\
		'''
		var div = $("#" +"%s").parent();
		$(div).attr('id', '%s');	
		'''%(attrs['id'], RESERVE_LIST_DIV)	
		print pagefn.script(content, link=False)
	
	# get the reservation of this user
	props = ['serial', 'target', 'amount', 'memo']
	reserves = model.filterByLink( so.user, 'reserve', 'user', so.user, props, 'booker')							      
	if not reserves :
		print H6(_('You have no reservations now.'))
		return
	
	toRender = model.reserveSort( [dict(zip(props, reserve)) for reserve in reserves],\
							  so.user)
			
	# now render the data to html table
	props = ('serial', 'alias', 'description', 'price' , 'amount', 'sub', 'memo')
	titles = (_('Serial'), _('Name'), _('Description'), _('Unit Price'), _('Amount'), _('Sub'), _('Addendum'))
	
	# construct table titles	
	thead = [TH(title, **{'style' : 'text-align : center;'}) for title in titles]
	thead = THEAD(TR(Sum(thead)))
	
	# construct table body which will be shown in a  tree style	
	tbody = []
	keys = toRender.keys()
	for key in keys :
		# render category row
		style = 'font-weight: bold; color: red'
		tbody.append(TR(TD(H5(key, **{'colspan': len(titles), 'style' : style})), **{'class' : CATEGORY_TAG}))
		
		# render the items belong to this category
		items = toRender.get(key)
		subcategories = items.keys()
		subcategories.sort()		
		ids = [model.serial2id(s) for s in subcategories]			
		values = model.get_items(so.user, 'service', props=('detail', 'description'), ids=ids)	
		for subcategory, value, pid in zip(subcategories,values, ids) :			
			# render the parent node row			
			alias = model.reserve_detailParser(value[0],('alias',)).get('alias')
			des = value[1]
			tds = []
			for v in (subcategory, alias, des) :
				if v == subcategory :
					tds.append(TD(SPAN(v, **{'style' : 'display: none;'})))
				else:
					tds.append(TD(SPAN(v)))
			tds = Sum(tds)			
			
			suffix = '-'.join(('node', pid))			
			tbody.append(TR(tds, **{'class' : "%s  %s" %(SUBCATEGORY_TAG, suffix) , 'id' : suffix}))	
					
			# render the children
			children = items.get(subcategory)			
			for child in children :					
				tds = []				
				for title, prop in zip(titles, props) :					
					value = child.get(prop)
					attr = {'class' : prop}
					
					if prop == 'serial':
						style = {'style' : 'display: none;'}
						attr.update(style)
						spans = [ SPAN( value or '', **attr ), \
								SPAN( child.get('serviceSerial') or '', **{'class' : 'service', 'style' : 'display:none;'} ), \
							        SPAN( subcategory, **{'class': 'parent', 'style' : 'display:none;'})] 
						tds.append(TD(Sum(spans)))
					else :						
						span = SPAN( value or '', **attr )						
						if prop in ('price', 'amount', 'sub'):
							tds.append(TD(span, **{'style' : 'text-align: right;' }))
						else:
							tds.append(TD(span))
				
				attr = {'class' : '-'.join(('child-of', suffix)) }				
				tbody.append(TR(Sum(tds), **attr))		
	
	# Now print table		
	tbody = TBODY(Sum(tbody))	
	table = (thead, tbody)
	table = TABLE(Sum(table))
	print table
	
	# Import treeTable js lib
	# and the script adding callback functions to the cells of the table.
	props = { 'serviceDiv': SERVICE_LIST_DIV,\
			'reserveDiv': RESERVE_LIST_DIV,\
			'editDiv': RESERVE_EDIT_DIV,\
			'editUrl': 'service/service.ks/page_reserveEdit',\
			'categoryTag' : CATEGORY_TAG,\
			'subcategoryTag' : SUBCATEGORY_TAG,\
			'action': 'edit' }
	paras = '&'.join([ '='.join((n, v)) for n,v in props.items() ] )	
	links = ('lib/treeTable/jquery.treeTable.js', 'service/reserveList.js.pih?%s'%paras)
	for link in links :
		print  pagefn.script(link)
	
	return
	
	
	