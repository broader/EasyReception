/*****************************************************************************************
<%
# PYTHON CODE
# import pagefn.py module to access some global variables 
pagefn = Import('/'.join(('', 'pagefn.py')))

%>
*****************************************************************************************/

/****************************************************************************************
Add or extend some assistant tools to MUI
*****************************************************************************************/
MUI.extend({
	// close all the opened MUI.Window instances
	closeAllWindows: function(){
		this.Windows.instances.each(function(instance){
			this.closeWindow(instance.windowEl);
		}.bind(this));
	},

	// a function to find a panel by its id
	getPanel: function(panelId){
		var search = MUI.Panels.instances.filter(function(panel,key){
			if( key == panelId){return true;}
			else{return false;}
		});
		
		var keys = search.getKeys();	
		if (keys.length == 1) return search[keys[0]];

		return null;
	},

	// add a inner object to MUI for managing mootools.Assets importing action 
	assetsManager: new AssetsManager(),
	
	/**********************************************************************************
	Clear cookie of this application, the cookie name is defined in 'pagefn.py' file.
	Close old session of this application.
	***********************************************************************************/
	appInit: function(){
		// remove old cookie		
		var name = '<%=pagefn.COOKIENAME %>';		
		if(Cookie.read(name) != null){
			Cookie.dispose(name);
		};
	},

	// a plugin to close single popup dialog window, such as login or register dialog 
	closeModalDialog: function(){
		// Remove form validation error informations that may be left.
		MUI.removeErr();
		
		// close modal dialog		
		MUI.Windows.instances.each(function(w){
   			if(w.options.type=='modal'){ w.close();	};
   		}); 
   		return true
	},
	
	// a function to remove error prompts for FormCheck lib
	removeErr: function(){
		// If there are left error information DIV elements created by 
		// FormCheck object, remove them.				
		for ( i in window){
			if ( window[i] instanceof FormCheck ){
				window[i].removeErrors();
			}					
		};		
	},
	
	/*************************************************************************************************************
	Return a styled <button> Element that provided by SexyButton plugin<http://code.google.com/p/sexybuttons/>.
	Parameters:
	options- a json object holds the setting options,
				which has keys 'txt','bnAttrs','bnType','bnSize','bnSkin'.
				'txt',the text on the button;
				'bnAttrs', optional, the attributes of the button;
				'imgType', the predefined type determined what image to be shown on the button, such as 'ok'
				'bnSize', optional,it should be one of 'sexysmall','sexymedium','sexylarge'
				'bnSkin', optionsal,the background color for the button 
	**************************************************************************************************************/
	styledButton: function(options){
		var bnClass = ['sexybutton','sexysimple'];	
		
		// default settings	
		$H({'bnSize':'sexymedium', 'bnSkin':'sexysimple'}).each(function(value,prop){
			bnClass.push( options[prop]||value);
		});
		
		// merge user defined attributes for button
		var bnAttrs = {'class': bnClass.join(' ')};
		
		if(options.bnAttrs){			
			$H(options.bnAttrs).each(function(value,key){				
				bnAttrs[key] = value;
			});			
		};
		
		var button = new Element('button', bnAttrs);		
		var span = new Element('span',{
			html: options.txt || '',
			'class': options.imgType
		});		
		button.grab(new Element('sapn').grab(span));
		
		return button; 
	},
	
	//	Pop up a window to require user to confirm a action. 
	confirm: function(message,closeFn, options){
		var defaultOptions = {
			loadMethod:'html', type: 'modal', title: '',
			maximizable: false,
			//minimizable: false,
			//resizable: false,				
			width:320, height:160, y: 120, 
			padding:  { top: 10, right: 12, bottom: 10, left: 12 },
			shadowBlur: 8
		};
		
		$H(options).each(function(value,key){
			detaultOptions[key] = value;
		});
		
		var cmWindow = new MUI.Window(defaultOptions);
		
		var messageEl = new Element('div',{
			html: message,
			'class':'note',
			'style':'font-weight:bold;font-size:1.5em;'
		});
		
		// add buttons to content
		var buttons = new Element('div',{style:'text-align:right;'});
		var labels = ['<%=pagefn.BUTTONLABELS['confirmWindow']['confirm']%>', '<%=pagefn.BUTTONLABELS['confirmWindow']['cancel']%>'];

		['ok','cancel'].each(function(actionType,index){
			// create buttons
			options = {
				txt: labels[index],
			        imgType: actionType,
				bnAttrs: {'style':'margin-right:1em;'}
				//bnSkin: 'sexycadet'
			};			
			button = MUI.styledButton(options);
			button.addEvent('click', function(e){		
				new Event(e).stop();						
				// close confirm window
				cmWindow.close();				
				closeFn(index);
			});
			buttons.grab(button);
			
		});		
		
		var container = new Element('div');
		container.adopt(messageEl,buttons);			
		
		// add content to this confirm window
		MUI.updateContent({
			'element': cmWindow.windowEl,
			'content': container,
			'method': 'html',
			//'url': options.contentURL,
			//'data': options.data,
			'onContentLoaded': null,
			'require': {}			
		});
	},
	
	// Create a customed window for show alert information.
	alert: function(message, options){
		defaultOptions = {
			loadMethod:'html', type: 'modal', title:'',
			maximizable: false, minimizable: false,
			//resizable: false,				
			width:320, height:140, y: 120, 
			padding:  { top: 10, right: 12, bottom: 10, left: 12 },
			shadowBlur: 8
		};
		
		$H(options).each(function(value,key){
			detaultOptions[key] = value;
		});
		
		aWindow = new MUI.Window(defaultOptions);
		
		messageEl = new Element('div',{
			html:message,
			'class':'info',
			'style':'font-weight:bold;font-size:1.5em;'
		});
		
		hr = new Element('hr',{style:'padding:0.8px;'});
		
		// add buttons to content
		buttons = new Element('div',{style:'text-align:right;'});
		labels = ['<%=pagefn.BUTTONLABELS['alertWindow']['ok']%>', ];
		['ok',].each(function(actionType,index){
			// create buttons
			options = {
				txt: labels[index],
			   imgType: actionType,
				bnAttrs: {'style':'margin-right:1em;'}
				//bnSkin: 'sexycadet'
			};			
			button = MUI.styledButton(options);
			button.addEvent('click', function(e){		
				new Event(e).stop();						
				// close confirm window
				aWindow.close();
			});
			buttons.grab(button);
			
		});		
		
		container = new Element('div');
		container.adopt(messageEl, hr, buttons);			
		
		// add content to this window
		MUI.updateContent({
			'element': aWindow.windowEl,
			'content': container,
			'method': 'html',
			'onContentLoaded': null,
			'require': {}			
		});
	},
	
	// Return a custom defined notification crawler
	crawler: function(message, options){
		var defaultOptions = {
			loadMethod: 'html',
			closeAfter: 1500,
			type: 'notification',
			addClass: 'notification',
			content: message,
			width: 220,
			height: 60,
			//y: 53,
			y: 280,
			x: 700,
			padding:  { top: 10, right: 12, bottom: 10, left: 12 },
			shadowBlur: 5	
		};
		
		$H(options).each(function(value,key){
			defaultOptions[key] = value;
		});
		new MUI.Window(defaultOptions);		
	}
});

