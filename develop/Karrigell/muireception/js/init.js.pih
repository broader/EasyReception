/* 

	In this file, first set the layout of the application, such as desktop and
	menu dock, etc. Then set the menus' function in login panel.

*/

/*
  
INITIALIZE THE TWO MENU 'Login' AND 'Register'

	1. 'Register' menu clicked function

	2. 'Login' menu clicked function	
	 
-------------------------------------------------------------------- */

<%
# PYTHON CODE
# get global variables stored in pagefn.py
pagefn = Import('/'.join(('', 'pagefn.py')))
registerTabsUrls = [ item.get('url') for item in pagefn.REGISTERTABS ]

# initial showing tabs' url
iniTabUrl = registerTabsUrls[0]

# Application name, when closing the registration dialog, 
# this name will be need to remove all the imported Assets tags.
registerAppName = pagefn.getApp(iniTabUrl,0)
%>


/****************************************************************************************
Add some assistant tools to MUI
*****************************************************************************************/
MUI.extend({
	// add a inner object to MUI for managing mootools.Assets importing action 
	assetsManager: new AssetsManager(),
	
	/**********************************************************************************
	Clear cookie of this application, the cookie name is defined in 'pagefn.py' file.
	Close old session of this application.
	***********************************************************************************/
	appInit: function(){
		// remove old cookie		
		var name = '<%=pagefn.COOKIENAME %>';		
		if(Cookie.read(name) != null){
			Cookie.dispose(name);
		};
		// close old session object
		initRequest = new Request.HTML().get('<%=pagefn.LAYOUTURLS[-1] %>');
	},
	
	// a plugin to close single popup dialog window, such as login or register dialog 
	closeModalDialog: function(){
		// Remove form validation error informations that may be left.
		MUI.removeErr();
		
		// close modal dialog		
   	MUI.Windows.instances.each(function(w){
   		if(w.options.type=='modal'){
   	 		w.close();
   	 	};
   	}); 
   	
   	return true
	},
	
	// a function to remove error prompts for FormCheck lib
	removeErr: function(){
		// If there are left error information DIV elements created by 
		// FormCheck object, remove them.				
		for ( i in window){
			if ( window[i] instanceof FormCheck ){
				window[i].removeErrors();
			}					
		};		
	},
	
	/*************************************************************************************************************
	Return a styled <button> Element that provided by SexyButton plugin<http://code.google.com/p/sexybuttons/>.
	Parameters:
	options- a json object holds the setting options,
				which has keys 'txt','bnAttrs','bnType','bnSize','bnSkin'.
				'txt',the text on the button;
				'bnAttrs', optional, the attributes of the button;
				'imgType', the predefined type determined what image to be shown on the button, such as 'ok'
				'bnSize', optional,it should be one of 'sexysmall','sexymedium','sexylarge'
				'bnSkin', optionsal,the background color for the button 
				 
	**************************************************************************************************************/
	styledButton: function(options){
		var bnClass = ['sexybutton','sexysimple'];	
		
		// default settings	
		$H({'bnSize':'sexymedium', 'bnSkin':'sexysimple'}).each(function(value,prop){
			bnClass.push( options[prop]||value);
		});
		
		// merge user defined attributes for button
		var bnAttrs = {'class': bnClass.join(' ')};
		
		if(options.bnAttrs){			
			$H(options.bnAttrs).each(function(value,key){				
				bnAttrs[key] = value;
			});			
		};
		
		var button = new Element('button', bnAttrs);		
		var span = new Element('span',{
			html: options.txt || '',
			'class': options.imgType
		});		
		button.grab(new Element('sapn').grab(span));
		
		return button; 
	},
	
	//	Pop up a window to require user to confirm a action. 
	confirm: function(message,closeFn, options){
		var defaultOptions = {
			loadMethod:'html', type: 'modal', title: '',
			maximizable: false,
			//minimizable: false,
			//resizable: false,				
			width:320, height:160, y: 120, 
			padding:  { top: 10, right: 12, bottom: 10, left: 12 },
			shadowBlur: 8
		};
		
		$H(options).each(function(value,key){
			detaultOptions[key] = value;
		});
		
		var cmWindow = new MUI.Window(defaultOptions);
		
		var messageEl = new Element('div',{
			html: message,
			'class':'note',
			'style':'font-weight:bold;font-size:1.5em;'
		});
		
		// add buttons to content
		var buttons = new Element('div',{style:'text-align:right;'});
		var labels = ['<%=pagefn.BUTTONLABELS['confirmWindow']['confirm']%>', '<%=pagefn.BUTTONLABELS['confirmWindow']['cancel']%>'];

		['ok','cancel'].each(function(actionType,index){
			// create buttons
			options = {
				txt: labels[index],
			        imgType: actionType,
				bnAttrs: {'style':'margin-right:1em;'}
				//bnSkin: 'sexycadet'
			};			
			button = MUI.styledButton(options);
			button.addEvent('click', function(e){		
				new Event(e).stop();						
				// close confirm window
				cmWindow.close();				
				closeFn(index);
			});
			buttons.grab(button);
			
		});		
		
		var container = new Element('div');
		container.adopt(messageEl,buttons);			
		
		// add content to this confirm window
		MUI.updateContent({
			'element': cmWindow.windowEl,
			'content': container,
			'method': 'html',
			//'url': options.contentURL,
			//'data': options.data,
			'onContentLoaded': null,
			'require': {}			
		});
					
	},
	
	// Create a customed window for show alert information.
	alert: function(message, options){
		defaultOptions = {
			loadMethod:'html', type: 'modal', title:'',
			maximizable: false, minimizable: false,
			//resizable: false,				
			width:320, height:140, y: 120, 
			padding:  { top: 10, right: 12, bottom: 10, left: 12 },
			shadowBlur: 8
		};
		
		$H(options).each(function(value,key){
			detaultOptions[key] = value;
		});
		
		aWindow = new MUI.Window(defaultOptions);
		
		messageEl = new Element('div',{
			html:message,
			'class':'info',
			'style':'font-weight:bold;font-size:1.5em;'
		});
		
		hr = new Element('hr',{style:'padding:0.8px;'});
		
		// add buttons to content
		buttons = new Element('div',{style:'text-align:right;'});
		labels = ['<%=pagefn.BUTTONLABELS['alertWindow']['ok']%>', ];
		['ok',].each(function(actionType,index){
			// create buttons
			options = {
				txt: labels[index],
			   imgType: actionType,
				bnAttrs: {'style':'margin-right:1em;'}
				//bnSkin: 'sexycadet'
			};			
			button = MUI.styledButton(options);
			button.addEvent('click', function(e){		
				new Event(e).stop();						
				// close confirm window
				aWindow.close();
			});
			buttons.grab(button);
			
		});		
		
		container = new Element('div');
		container.adopt(messageEl, hr, buttons);			
		
		// add content to this window
		MUI.updateContent({
			'element': aWindow.windowEl,
			'content': container,
			'method': 'html',
			'onContentLoaded': null,
			'require': {}			
		});
			
	}
	
});


// the names for prelogin menues' click function 
var fNames = [ 'login', 'register' ];
// a object holds two functions for prelogin 
var loginFns = {

	/* The 'click' callback function for the 'login' menu. */
	'login': function(event){
		new Event(event).stop();
		
		modal = new MUI.Modal({
			//id: dlgId,
			title: '<%=_("Login Dialog") %>',			
			contentURL: "<%=pagefn.LOGINFORM%>",
			//type: 'modal2',
			modalOverlayClose: false,
			width: 400,
			height: 300,
			//padding: { top: 10, right: 12, bottom: 10, left: 12 },
			scrollbars: true,
						
			onClose: function(e){
				MUI.removeErr();
			}			
		});
		
		return modal
		
	},
	
	'register': function(event){
		new Event(event).stop();
		
		var dlgId = '<%=pagefn.REGISTERDIALOG %>'; 
		var tabsId = '<%=pagefn.REGISTERTABSID %>';
		
		// using python inside html to set the tabs' url to a javascript array
		var tabUrls = []; 
		<% for url in registerTabsUrls: %>					
			tabUrls.push("<%=url%>");
		<% end %>
		
		// Define a tab switching function. It's a global function and will be called
		// in registration form submitting process, for this reason we should not use
		// 'var' before the variable.
		tabSwitch = function(index) {
			var spinner = new Spinner(dlgId+'_content'); 						
			spinner.show();
			$(tabsId).getElements('li')[index].fireEvent('click');						
			MUI.updateContent({'element':$(dlgId), 'url':tabUrls[index]});
			spinner.hide();
		};
		
		new MUI.Modal({
			id: dlgId,
			title: '<%=_("Register Dialog") %>',			
			contentURL: '<%=iniTabUrl%>',
			//type: 'modal2',
			modalOverlayClose: false,
			width: 750,
			height: 400,
			padding: { top: 10, right: 12, bottom: 10, left: 12 },
			scrollbars: true,
			//shape: 'gaoge',
			toolbar: true,
			toolbarURL:'register/register.ks/tabs',
			toolbarOnload: function(){				
				// add selected class to each tabs when they are selected				
				MUI.initializeTabs(tabsId);
				$(tabsId).getElements('li')[0].fireEvent('click');							
			},
			
			onClose: function(e){	
				// remove validation errors' information	
				MUI.removeErr();		
					
				// Remove all the imported Assets				
				MUI.assetsManager.remove('<%=registerAppName %>','app');
			}			
		});
				
		return false;
	}
};

function preLoginInit(){	
	$('topNav').getElements('li').each(function(item,index){
		item.addEvent('click', loginFns[fNames[index]]);
	});
	
	// application initialization, including closing old session and removing old cookie
	MUI.appInit();
};


// Initialize MochaUI when the DOM is ready
window.addEvent('load', function(){ //using load instead of domready for IE8

	MUI.myChain = new Chain();
	MUI.myChain.chain(
		function(){MUI.Desktop.initialize();},
		function(){MUI.Dock.initialize();},
		preLoginInit()		
	).callChain();	

});
