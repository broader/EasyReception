"""Base class to represent a tree structure.

:copyright: 2000-2008 LOGILAB S.A. (Paris, FRANCE), all rights reserved.
:contact: http://www.logilab.fr/ -- mailto:contact@logilab.fr
:license: General Public License version 2 - http://www.gnu.org/licenses
"""
__docformat__ = "restructuredtext en"

import sys

#from logilab.common import flatten
#from logilab.common.visitor import VisitedMixIn, FilteredIterator, no_filter

## VisitedMixIn, FilteredIterator, no_filter are clipped from logilab.common.visitor.py #####################
def no_filter(_):
    return 1

# Iterators ###################################################################
class FilteredIterator(object):

	def __init__(self, node, list_func, filter_func=None):
		self._next = [(node, 0)]
		if filter_func is None:
			filter_func = no_filter
		self._list = list_func(node, filter_func)

	def next(self):
		try:
			return self._list.pop(0)
		except :
			return None

# Base Visitor ################################################################
class Visitor(object):

	def __init__(self, iterator_class, filter_func=None):
		self._iter_class = iterator_class
		self.filter = filter_func

	def visit(self, node, *args, **kargs):
		"""
      launch the visit on a given node

      call 'open_visit' before the beginning of the visit, with extra args
      given
      when all nodes have been visited, call the 'close_visit' method
      """
		self.open_visit(node, *args, **kargs)
		return self.close_visit(self._visit(node))

	def _visit(self, node):
		iterator = self._get_iterator(node)
		n = iterator.next()
		while n:
			result = n.accept(self)
			n = iterator.next()
		return result

	def _get_iterator(self, node):
		return self._iter_class(node, self.filter)

	def open_visit(self, *args, **kargs):
		"""
      method called at the beginning of the visit
      """
		pass

	def close_visit(self, result):
		"""
      method called at the end of the visit
      """
		return result

# standard visited mixin ######################################################
class VisitedMixIn(object):
	"""
   Visited interface allow node visitors to use the node
   """
	def get_visit_name(self):
		"""
      return the visit name for the mixed class. When calling 'accept', the
      method <'visit_' + name returned by this method> will be called on the
      visitor
      """
		try:
			return self.TYPE.replace('-', '_')
		except:
			return self.__class__.__name__.lower()

	def accept(self, visitor, *args, **kwargs):
		func = getattr(visitor, 'visit_%s' % self.get_visit_name())
		return func(self, *args, **kwargs)

	def leave(self, visitor, *args, **kwargs):
		func = getattr(visitor, 'leave_%s' % self.get_visit_name())
		return func(self, *args, **kwargs)


## The flatten function slice that clipped from loginlab.common.__init__.py #################################
def flatten(iterable, tr_func=None, results=None):
	"""Flatten a list of list with any level.

   If tr_func is not None, it should be a one argument function that'll be called
   on each final element.

   :rtype: list
   >>> flatten([1, [2, 3]])    [1, 2, 3]
   """
	if results is None:
		results = []
	for val in iterable:
   	if isinstance(val, (list, tuple)):
			flatten(val, tr_func, results)
		elif tr_func is None:
			results.append(val)
		else:
			results.append(tr_func(val))
	
	return results
   
   
## Exceptions #################################################################

class NodeNotFound(Exception):
	"""raised when a node has not been found"""

EX_SIBLING_NOT_FOUND = "No such sibling as '%s'"
EX_CHILD_NOT_FOUND = "No such child as '%s'"
EX_NODE_NOT_FOUND = "No such node as '%s'"


# Base node ###################################################################

class Node(object):
	"""a basic tree node, characterized by an id"""

	def __init__(self, nid=None) :
		self.id = nid
		# navigation
		self.parent = None
		self.children = []

	def __iter__(self):
		return iter(self.children)

	def __str__(self, indent=0):
		s = ['%s%s %s' % (' '*indent, self.__class__.__name__, self.id)]
		indent += 2
		for child in self.children:
			try:
				s.append(child.__str__(indent))
			except TypeError:
				s.append(child.__str__())
		return '\n'.join(s)

	def is_leaf(self):
		return not self.children

	def append(self, child):
		"""add a node to children"""
		self.children.append(child)
		child.parent = self

	def remove(self, child):
		"""remove a child node"""
		self.children.remove(child)
		child.parent = None

	def insert(self, index, child):
		"""insert a child node"""
		self.children.insert(index, child)
		child.parent = self

	def replace(self, old_child, new_child):
		"""replace a child node with another"""
		i = self.children.index(old_child)
		self.children.pop(i)
		self.children.insert(i, new_child)
		new_child.parent = self

	def get_sibling(self, nid):
		"""return the sibling node that has given id"""
		try:
			return self.parent.get_child_by_id(nid)
		except NodeNotFound :
			raise NodeNotFound(EX_SIBLING_NOT_FOUND % nid)

	def next_sibling(self):
		"""
      return the next sibling for this node if any
      """
		parent = self.parent
		if parent is None:
			# root node has no sibling
			return None
		index = parent.children.index(self)
		try:
			return parent.children[index+1]
		except IndexError:
			return None

	def previous_sibling(self):
		"""
      return the previous sibling for this node if any
      """
		parent = self.parent
		if parent is None:
			# root node has no sibling
			return None
		index = parent.children.index(self)
		if index > 0:
			return parent.children[index-1]
		return None

	def get_node_by_id(self, nid):
		"""
      return node in whole hierarchy that has given id
      """
		root = self.root()
		try:
			return root.get_child_by_id(nid, 1)
		except NodeNotFound :
			raise NodeNotFound(EX_NODE_NOT_FOUND % nid)

	def get_child_by_id(self, nid, recurse=None):
		"""
      return child of given id
      """
		if self.id == nid:
			return self
		for c in self.children :
			if recurse:
				try:
					return c.get_child_by_id(nid, 1)
				except NodeNotFound :
					continue
			if c.id == nid :
				return c
		raise NodeNotFound(EX_CHILD_NOT_FOUND % nid)

	def get_child_by_path(self, path):
		"""
      return child of given path (path is a list of ids)
      """
		if len(path) > 0 and path[0] == self.id:
			if len(path) == 1 :
				return self
			else :
				for c in self.children :
					try:
						return c.get_child_by_path(path[1:])
					except NodeNotFound :
						pass
		raise NodeNotFound(EX_CHILD_NOT_FOUND % path)

	def depth(self):
		"""
      return depth of this node in the tree
      """
		if self.parent is not None:
			return 1 + self.parent.depth()
		else :
			return 0

	def depth_down(self):
		"""
      return depth of the tree from this node
      """
		if self.children:
			return 1 + max([c.depth_down() for c in self.children])
		return 1

	def width(self):
		"""
      return the width of the tree from this node
      """
		return len(self.leaves())

	def root(self):
		"""
      return the root node of the tree
      """
		if self.parent is not None:
			return self.parent.root()
		return self

	def leaves(self):
	"""
   return a list with all the leaves nodes descendant from this node
   """
		leaves = []
		if self.children:
			for child in self.children:
				leaves += child.leaves()
			return leaves
		else:
				return [self]

	def __iter__(self):
		return iter(self.children)

	def flatten(self, _list=None):
		"""
      return a list with all the nodes descendant from this node
      """
		if _list is None:
			_list = []
		_list.append(self)
		for c in self.children:
			c.flatten(_list)
		return _list

	def lineage(self):
		"""
      return list of parents up to root node
      """
		lst = [self]
		if self.parent is not None:
			lst.extend(self.parent.lineage())
		return lst


class VNode(Node, VisitedMixIn):
	"""a visitable node
   """
	pass


class BinaryNode(VNode):
	"""a binary node (i.e. only two children
   """
	def __init__(self, lhs=None, rhs=None) :
		VNode.__init__(self)
		if lhs is not None or rhs is not None:
			assert lhs and rhs
			self.append(lhs)
			self.append(rhs)

	def remove(self, child):
		"""remove the child and replace this node with the other child
      """
		self.children.remove(child)
		self.parent.replace(self, self.children[0])

	def get_parts(self):
		"""
      return the left hand side and the right hand side of this node
      """
		return self.children[0], self.children[1]



if sys.version_info[0:2] >= (2, 2):
	list_class = list
else:
	from UserList import UserList
	list_class = UserList

class ListNode(VNode, list_class):
	"""Used to manipulate Nodes as Lists
   """
	def __init__(self):
		list_class.__init__(self)
		VNode.__init__(self)
		self.children = self

	def __str__(self, indent=0):
		return '%s%s %s' % (indent*' ', self.__class__.__name__,
                            ', '.join([str(v) for v in self]))

	def append(self, child):
		"""add a node to children"""
		list_class.append(self, child)
		child.parent = self

	def insert(self, index, child):
		"""add a node to children"""
		list_class.insert(self, index, child)
		child.parent = self

	def remove(self, child):
		"""add a node to children"""
		list_class.remove(self, child)
		child.parent = None

	def pop(self, index):
		"""add a node to children"""
		child = list_class.pop(self, index)
		child.parent = None

	def __iter__(self):
		return list_class.__iter__(self)

# construct list from tree ####################################################

def post_order_list(node, filter_func=no_filter):
	"""
   create a list with tree nodes for which the <filter> function returned true
   in a post order fashion
   """
   l, stack = [], []
	poped, index = 0, 0
	while node:
		if filter_func(node):
			if node.children and not poped:
				stack.append((node, index))
			index = 0
				node = node.children[0]
			else:
				l.append(node)
				index += 1
				try:
					node = stack[-1][0].children[index]
				except IndexError:
					node = None
		else:
			node = None
		poped = 0
		if node is None and stack:
			node, index = stack.pop()
			poped = 1
	return l

def pre_order_list(node, filter_func=no_filter):
	"""
   create a list with tree nodes for which the <filter> function returned true
   in a pre order fashion
   """
	l, stack = [], []
	poped, index = 0, 0
	while node:
		if filter_func(node):
			if not poped:
				l.append(node)
			if node.children and not poped:
				stack.append((node, index))
				index = 0
				node = node.children[0]
			else:
				index += 1
				try:
					node = stack[-1][0].children[index]
				except IndexError:
					node = None
		else:
			node = None
		poped = 0
		if node is None and len(stack) > 1:
			node, index = stack.pop()
			poped = 1
	return l

class PostfixedDepthFirstIterator(FilteredIterator):
	"""a postfixed depth first iterator, designed to be used with visitors  """
	def __init__(self, node, filter_func=None):
		FilteredIterator.__init__(self, node, post_order_list, filter_func)
		
class PrefixedDepthFirstIterator(FilteredIterator):
	"""a prefixed depth first iterator, designed to be used with visitors """
	def __init__(self, node, filter_func=None):
		FilteredIterator.__init__(self, node, pre_order_list, filter_func)

