"""
This module is mainly used for render html form element.
"""

from HTMLTags import *

def yform(fields):
	""" Render YAML formats form components."""
	divs = [ getField(item) for item in fields ]
	return divs

def _getValidClass(field, required):
	""" Set the form fileld's style class. """
	validClassName = "validate"
	validClass = field.pop(validClassName)
	
	if required :
		validClass.append("required")
    
	if validClass :
		validClass = ["".join(("\'",item, "\'")) for item in validClass]
		validClass = "".join(( validClassName, "[", ",".join(validClass), "]"))
		# field type
		fieldType = field.get("type")
		if fieldType in ("text","input","password"):
			validClass = " ".join((validClass, "text-input"))
			
	else:
		validClass = None 
	
	return validClass
    
def getField(field):
	""" Render YAML formats form field."""
	
	prompt,required,oldvalue = [ field.pop(prop) for prop in ( "prompt", "required", "oldvalue" )]
	
	# for i18n need
	prompt = _(prompt)
	
	div = []
	label = TEXT()
	
	if required:
		# this field must be input by the user
		old = field.get('class')
		if old :
			newclass = ' '.join((old,'required'))
		else:
			newclass = "required"
			
		field['class'] = newclass
		label += SUP("*", title=_("This field is mandotroy."))
		 
		if prompt:
			label += TEXT(prompt)
	else:
		label = TEXT(prompt)
	
		 
	label = LABEL(label, **{"for": field.get("id"),"style":"font-size:1.2em;text-align:left;width:100%;"})
	div.append(label)
    
	klass = _getValidClass(field,required)		
	if klass :
		field["class"] = klass    
    
	fieldType = field.get("type")
	key = field.get("key")
	if key :
		# It"s a "Captcha" input fields,
		# so add the captcha image and corresponding captcha key.
		field.pop("key")
		image = field.pop("image")
		input = Sum((INPUT(**field),image, key))
	else:
		# maybe this filed has old value
		oldvalue = oldvalue or ""
		if fieldType in ("input", "text", "password"):
			field["value"] = oldvalue
			input = INPUT( **field)
		elif fieldType == "textarea":
			input = TEXTAREA(oldvalue, **field)
		elif fieldType == "radio":
			options = field.pop("options")
			if not oldvalue:
				oldvalue = 0
			
			radioes = [BR(),]
			name = field.get("name")
			
			for option in options:				
				if str(option.get("value")) == str(oldvalue) :
					option["checked"] = ""
					
				option["name"] = name
				option["type"] = "radio"
				text = _( option.pop("label") )
				input = INPUT(**option)
				text = TEXT("".join(( text, "&nbsp;&nbsp;")))
				radioes.append( Sum(( input, text)) )
				
			input = Sum(radioes)
		elif fieldType == "select":
			options = field.pop("options")
			if not oldvalue:
				oldvalue = 0
			select = []
			name = field.get("name")
			
			for option in options:
				if str(option.get("value")) == str(oldvalue):
					option["selected"] = ""
				text = _( option.pop("label") )
				select.append(OPTION(text, **option))
			
			[ field.pop(prop) for prop in ("type", "class")]	
			input = SELECT(Sum(select),**field)
		
	div.append(input)
	
	if fieldType in ("text", "textarea", "input", "password"):
		ctype = "-".join(("type", "text"))
	elif fieldType in ( "radio", "multiselect" ):
		ctype = "-".join(("type", "check"))
	else:
		ctype = "-".join(("type", fieldType))
	
	return DIV(Sum(div), **{"class":ctype})


def filterProps(fields,values):
	""" Filter the needed properties of fields for render_table_fields function."""
	pass
	return
		
def render_table_fields( fields, cols, labelStyle, valueStyle):
	""" 
	Render the table rows which is mainly used for showing fields.
	Parameters:
		fields - a list, the format is [{'prompt':...,'value':...,'type':...},...];
	  	cols - the columns divided by field number, 
	  		   each column contains a label for showing field's name and 
	  		   a label for showning field's value;
	  	labelStyle - A dictionary object that has two keyes('label' and 'td'). 
	  					 The values of these two keyes holds the styles of <td> and 
	  					 <div> for showing field's label;
	  	valueStyle - A dictionary object that has two keyes('label' and 'td'). 
	  					 The values of these two keyes holds the styles of <td> and 
	  					 <div> for showing field's values;
	"""	
	fieldsNumber = cols

	cols = divmod(len(fields), cols)
	if cols[1]:
		cols = cols[0] +1
	else:
		cols = cols[0]
		
	trs = []	
	for g in range(cols) :
		tr = []		 
		for i in range(fieldsNumber):
			try:				
				field = fields.pop(0)
				name, value, type = [ field.get(prop) for prop in ('prompt', 'value', 'type') ]							 
				attrdiv = DIV(name, style=labelStyle.get('label') or '')
				if type !='textarea':
					valuelabel = LABEL(value,style=valueStyle.get('label') or '')
				else:
					valuelabel = TEXTAREA(value,style=valueStyle.get('textarea') or '', disabled='')
				td = TD(attrdiv, style=labelStyle.get('td') or '')+TD(valuelabel, style=valueStyle.get('td') or '')
			except:
				break 		 			
			tr.append(td)
		trs.append(TR(Sum(tr)))

	# return the HTMLTag	
	return Sum(trs)